VERSION 0.8
IMPORT ../../infrastructure/earthly/go AS go-build

LOCALLY
ARG --global service=$(basename $PWD)
ARG --global src_files=$(find pkg -type f ! -name "*_test.go")
ARG --global cgo_enabled=0

deps:
    FROM ../../+deps
    DO go-build+DEPS --service=$service --src_files=$src_files
    WORKDIR services/$service

artifacts:
    FROM +deps
    SAVE ARTIFACT /etc/ssl/certs/ca-certificates.crt
    SAVE ARTIFACT /usr/share/zoneinfo

compile:
    FROM +deps
    DO go-build+COMPILE --cgo_enabled=$cgo_enabled

unit-test:
    FROM +compile
    DO go-build+UNIT_TEST

lint:
    FROM +deps
    DO go-build+LINT
    
docker:
    FROM alpine:3.18
    ARG UID=1000
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG tag="local"
    ARG use_datadog=false
    COPY +deps-ui/build /build
    DO go-build+DOCKER --workdir=/ --UID=$UID --image_tag=$registry/kuberpult-$service:$tag --cgo_enabled=$cgo_enabled --service=$service --use_datadog=$use_datadog

release:
    FROM +docker
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG --required tag
    DO go-build+RELEASE --image_tag=$registry/kuberpult-$service:$tag

deps-ui:
    FROM node:20.9.0-alpine3.18
    WORKDIR /kp
    RUN npm install -g pnpm@8.9.2
    RUN chown -R node:node /kp
    USER node
    COPY package.json pnpm-lock.yaml pnpm-workspace.yaml buf.yaml buf.gen.yaml buf.lock tsconfig.json .eslintrc .prettierrc .npmrc .nvmrc .
    RUN pnpm i

    COPY ../../+deps/buf /usr/bin/buf
    COPY ../../pkg+artifacts/pkg/api/v1 api
    COPY src src
    COPY public public
    RUN buf generate --path api --timeout 5m
    SAVE ARTIFACT src/api AS LOCAL src/api
    RUN pnpm build
    
    SAVE ARTIFACT build

node-modules:
    FROM +deps-ui
    SAVE ARTIFACT node_modules AS LOCAL node_modules

lint-ui:
    FROM +deps-ui
    RUN pnpm eslint-check
    RUN pnpm scss-check

unit-test-ui:
    FROM +deps-ui
    RUN pnpm test -- --watchAll=false

docker-ui:
    FROM +deps-ui
    CMD "rm -rf src/api src/google && buf generate --path api --timeout 5m && pnpm start" 
    SAVE IMAGE ui:local
    SAVE ARTIFACT src/api AS LOCAL src/api
    SAVE ARTIFACT src/google AS LOCAL src/google

release-ui:
    FROM +docker-ui
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    SAVE IMAGE --push $registry/kuberpult-ui:local

build-pr:
    ARG --required tag
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG mirror="false"
    ARG mirror_registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"

    DO +BUILD_ALL --tag=$tag --registry=$registry --mirror=$mirror  --mirror_registry=$mirror_registry

build-main:
    ARG --required tag
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG mirror="false"
    ARG mirror_registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"

    DO +BUILD_ALL --tag=$tag --registry=$registry --mirror=$mirror  --mirror_registry=$mirror_registry --dd_release=true

BUILD_ALL:
    FUNCTION
    ARG --required tag
    ARG --required registry
    ARG mirror_registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG mirror=""
    ARG dd_release=false

    FROM +deps
    BUILD +lint-ui
    BUILD +lint
    BUILD +unit-test 
    BUILD +unit-test-ui
    BUILD +release --registry=$registry --tag=$tag
    IF [ "$mirror" = "true" ]
        BUILD +release --registry=$mirror_registry --tag=$tag
    END
    IF [ "$dd_release" = "true" ]
        BUILD +release --registry=$mirror_registry --tag="${tag}-datadog" --use_datadog=true
    END
