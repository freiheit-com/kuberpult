VERSION 0.7

deps:
    FROM ../../+deps
    ARG service
    COPY ../../pkg/api/+artifacts/* pkg/api/
    COPY ../../pkg/api/+artifacts/* services/$service/api/
    COPY ../../pkg/auth/+artifacts/* pkg/auth/
    COPY ../../pkg/logger/+artifacts/* pkg/logger/
    COPY ../../pkg/setup/+artifacts/* pkg/setup/
    COPY ../../pkg/tracing/+artifacts/* pkg/tracing/
    COPY ../../pkg/path/+artifacts/* pkg/path/
    COPY (../cd-service/+artifacts/pkg --service=cd-service) services/cd-service/pkg/
    RUN ls services/cd-service/pkg
    COPY pkg services/$service/pkg
    COPY public services/$service/public
    COPY src services/$service/src
    COPY cmd/server/* services/$service/cmd/server/
    RUN apt update && apt --auto-remove install ca-certificates tzdata libgit2-dev libsqlite3-dev -y
    SAVE ARTIFACT /etc/ssl/certs/ca-certificates.crt
    SAVE ARTIFACT /usr/share/zoneinfo
    SAVE IMAGE --cache-hint
artifacts:
    FROM +deps
    ARG service
    WORKDIR services/$service
    COPY package.json pnpm-lock.yaml pnpm-workspace.yaml tsconfig.json .
    SAVE ARTIFACT package.json
    SAVE ARTIFACT tsconfig.json
    SAVE ARTIFACT pnpm-lock.yaml
    SAVE ARTIFACT pnpm-workspace.yaml
    SAVE ARTIFACT src
compile:
    FROM +deps
    ARG service
    ARG USERARCH
    WORKDIR services/$service/cmd/server
    RUN CGO_ENABLED=1 \
        GOARCH=$USERARCH \
	    GOOS=linux \
        go build -o bin/main main.go
    SAVE ARTIFACT bin/main
unit-test-deps:
    FROM +deps
    ARG service
    COPY ../../pkg/ptr/+artifacts/* pkg/ptr/
    COPY ../../pkg/testutil/+artifacts/* pkg/testutil/
    COPY ../../pkg/testfs/+artifacts/* pkg/testfs/
unit-test:
    FROM +unit-test-deps
    WORKDIR services/$service
    RUN CGO_ENABLED=1 go test ./...

docker:
    FROM +deps
    ARG service
    ARG tag="local"
    ENV TZ=Europe/Berlin
    COPY +compile/main /main
    ENTRYPOINT ["/main"] 
    SAVE IMAGE $service:$tag

deps-ui:
    FROM node:20.9.0-alpine3.18
    ARG BUF_VERSION=v1.26.1
    ARG BUF_BIN_PATH=/usr/local/bin

    WORKDIR /kp
    COPY ../../pkg/api/+artifacts/* api/
    COPY src src
    COPY public public
    COPY package.json pnpm-lock.yaml pnpm-workspace.yaml buf* tsconfig.json .eslintrc .prettierrc .npmrc .nvmrc .
    RUN npm install -g pnpm@8.9.2
    RUN apk add --upgrade --no-cache curl 
    RUN OS=Linux ARCH=$(uname -m) && \
        curl -sSL \
        "https://github.com/bufbuild/buf/releases/download/${BUF_VERSION}/buf-${OS}-${ARCH}" \
        -o "${BUF_BIN_PATH}/buf" && \
        chmod +x "${BUF_BIN_PATH}/buf"
    RUN OS=Linux ARCH=$(uname -m) && \
        SHA=$(cat buf_sha256.txt | grep "buf-${OS}-${ARCH}$" | cut -d ' ' -f1) && \
        echo "${SHA}  ${BUF_BIN_PATH}/buf" | sha256sum -c
    RUN pnpm i && buf generate --path api --timeout 5m
    
docker-ui:
    FROM +deps-ui
    CMD "pnpm start" 
    SAVE IMAGE ui:local

release:
    FROM +docker
    ARG service
    ARG tag="latest"
    ARG registry="eu.gcr.io/fdc-standard-setup-dev-env"
    SAVE IMAGE --push $registry/services/$service:$tag
