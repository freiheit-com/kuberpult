VERSION --use-function-keyword 0.7
IMPORT ../../infrastructure/earthly/go AS go-build

LOCALLY
ARG --global service=$(basename $PWD)
ARG --global src_files=$(find pkg -type f ! -name "*_test.go")
ARG --global UID=1000
ARG --global cgo_enabled=1

deps:
    FROM ../../+deps
    DO go-build+DEPS --service=$service --src_files=$src_files
    WORKDIR services/$service

artifacts:
    FROM +deps
    SAVE ARTIFACT /etc/ssl/certs/ca-certificates.crt
    SAVE ARTIFACT /usr/share/zoneinfo
    SAVE ARTIFACT pkg

compile:
    FROM +deps
    ARG USERARCH
    
    DO +CGO_LIBS --cgo_enabled=$cgo_enabled
    DO go-build+COMPILE --cgo_enabled=$cgo_enabled

unit-test:
    FROM +compile
    DO go-build+UNIT_TEST
    
docker:
    FROM alpine:3.18
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG tag="local"
    COPY gitconfig /etc/gitconfig
    DO go-build+DOCKER --UID=$UID --image_tag=$registry/kuberpult-$service:$tag --cgo_enabled=$cgo_enabled --entry_point=/main --service=$service

release:
    FROM +docker
    ARG registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG --required tag
    DO go-build+RELEASE --image_tag=$registry/kuberpult-$service:$tag


build-pr:
    ARG --required tag
    ARG registry="ghcr.io/freiheit-com/kuberpult"
    ARG mirror="false"
    ARG mirror_registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"

    DO +BUILD_ALL --tag=$tag --registry=$registry --mirror=$mirror  --mirror_registry=$mirror_registry

build-main:
    ARG --required tag
    ARG registry="ghcr.io/freiheit-com/kuberpult"
    ARG mirror="false"
    ARG mirror_registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"

    DO +BUILD_ALL --tag=$tag --registry=$registry --mirror=$mirror  --mirror_registry=$mirror_registry

BUILD_ALL:
    FUNCTION
    ARG --required tag
    ARG --required registry
    ARG mirror_registry="europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult"
    ARG mirror=""

    FROM +deps
    BUILD +unit-test 
    BUILD +release --registry=$registry --tag=$tag
    IF [ "$mirror" = "true" ]
        BUILD +release --registry=$mirror_registry --tag=$tag
    END

CGO_LIBS:
    FUNCTION
    ARG USERARCH
    ARG cgo_enabled
    IF [ "$cgo_enabled" = "1" ]
        IF [ "$USERARCH" = "arm64" ]
            RUN apt update && apt install --auto-remove libgit2-dev libsqlite3-dev -y
        ELSE
            RUN apk add --no-cache libgit2-dev sqlite-dev alpine-sdk
        END
    END