/*This file is part of kuberpult.

Kuberpult is free software: you can redistribute it and/or modify
it under the terms of the Expat(MIT) License as published by
the Free Software Foundation.

Kuberpult is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
MIT License for more details.

You should have received a copy of the MIT License
along with kuberpult. If not, see <https://directory.fsf.org/wiki/License:Expat>.

Copyright 2023 freiheit.com*/

package main_test

import (
	"fmt"
	apps "k8s.io/api/apps/v1"
	core "k8s.io/api/core/v1"
	"math/rand"
	"os"
	"os/exec"
	k8sYaml "sigs.k8s.io/yaml" //Needed to properly parse the yaml generated by helm, "gopkg.in/yaml.v3" cannot do it properly
	"strconv"
	"strings"
	"testing"
)

func runHelm(t *testing.T, valuesData []byte, dirName string) string {
	testId := strconv.Itoa(rand.Intn(9999))
	tempValuesFile := "vals" + "_" + testId + ".yaml"
	tempValuesFile = dirName + "/" + tempValuesFile

	err := os.WriteFile(tempValuesFile, valuesData, 0644)
	if err != nil {
		t.Fatalf("Error writing vals file . %v", err)
	}
	outputFile := "tmp_" + testId + ".tmpl"
	outputFile = dirName + "/" + outputFile

	execOutput, err := exec.Command("sh", "-c", "helm template ./.. --values "+tempValuesFile+" > "+outputFile).CombinedOutput()

	if err != nil {
		t.Fatalf("Error executing helm: Helm output: '%s'\nError: %v\n", string(execOutput), err)
	}

	return outputFile
}
func CheckForEnvVariable(t *testing.T, target core.EnvVar, deployment *apps.Deployment) bool {
	for _, container := range deployment.Spec.Template.Spec.Containers {
		for _, env := range container.Env {
			if env.Name == target.Name {
				if env.Value == target.Value {
					return true
				} else {
					t.Logf("Found '%s' env variable. Value mismatch: wanted: '%s', got: '%s'.\n", target.Name, target.Value, env.Value)
				}
			}
		}
	}
	return false
}

func searchSimpleKeyValuePair(yaml []string, key string, value string) bool {
	keyTarget := key + ":"
	for _, line := range yaml {
		line = strings.TrimSpace(line)
		if strings.HasPrefix(line, keyTarget) {
			if strings.Contains(line[len(keyTarget):], value) {
				return true
			}
		}
	}
	return false
}

func checkDeployment(lines []string) bool {
	return searchSimpleKeyValuePair(lines, "kind", "Deployment")
}

// Check template files at ../templates/
func getDeployments(fileName string) (map[string]apps.Deployment, error) {
	data, err := os.ReadFile(fileName)
	if err != nil {
		return nil, fmt.Errorf("error reading yaml file '%s': %w", fileName, err)
	}
	output := map[string]apps.Deployment{}               // Name of deployment -> configuration
	deploymentYAML := strings.Split(string(data), "---") //Split into documents
	for _, document := range deploymentYAML {
		if checkDeployment(strings.Split(document, "\n")) {
			var target apps.Deployment
			if err := k8sYaml.Unmarshal([]byte(document), &target); err != nil {
				return nil, fmt.Errorf("Unmarshalling deployment failed failed: %s\n", document)
			}
			output[target.Name] = target
		}
	}
	return output, nil
}
func TestHelmChartsKuberpultCdEnvVariables(t *testing.T) {

	tcs := []struct {
		Name            string
		Values          string
		ExpectedEnvs    []core.EnvVar
		ExpectedMissing []core.EnvVar
	}{
		{
			Name: "Basic Parsing works",
			Values: `
git:
  url:  "testURL"
pgp:
  keyRing: ""
ingress:
  domainName: "kuberpult-example.com"

environment_configs:
  bootstrap_mode: true
  environment_configs_json: "{}"
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "KUBERPULT_GIT_URL",
					Value: "testURL",
				},
				{
					Name:  "KUBERPULT_BOOTSTRAP_MODE",
					Value: "true",
				},
			},
			ExpectedMissing: []core.EnvVar{
				{
					Name:  "KUBERPULT_PGP_KEY_RING_PATH",
					Value: "",
				},
			},
		},
		{
			Name: "Change Git URL",
			Values: `
git:
  url:  "checkThisValue"
ingress:
  domainName: "kuberpult-example.com"
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "KUBERPULT_GIT_URL",
					Value: "checkThisValue",
				},
			},
			ExpectedMissing: []core.EnvVar{},
		},
		{
			Name: "Argo CD disabled",
			Values: `
git:
  url: "testURL"
ingress:
  domainName: "kuberpult-example.com"
argocd:
  generateFiles: false
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "KUBERPULT_ARGO_CD_GENERATE_FILES",
					Value: "false",
				},
				{
					Name:  "KUBERPULT_GIT_URL",
					Value: "testURL",
				},
			},
			ExpectedMissing: []core.EnvVar{},
		},
		{
			Name: "Argo CD enabled simple test",
			Values: `
git:
  url: "testURL"
ingress:
  domainName: "kuberpult-example.com"
argocd:
  generateFiles: true
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "KUBERPULT_ARGO_CD_GENERATE_FILES",
					Value: "true",
				},
				{
					Name:  "KUBERPULT_GIT_URL",
					Value: "testURL",
				},
			},
			ExpectedMissing: []core.EnvVar{},
		},
		{
			Name: "DD Metrics disabled",
			Values: `
git:
  url: "testURL"
ingress:
  domainName: "kuberpult-example.com"
dataDogTracing:
  enabled: false
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "KUBERPULT_GIT_URL",
					Value: "testURL",
				},
			},
			ExpectedMissing: []core.EnvVar{
				{
					Name:  "DD_AGENT_HOST",
					Value: "",
				},
				{
					Name:  "DD_ENV",
					Value: "",
				},
				{
					Name:  "DD_SERVICE",
					Value: "",
				},
				{
					Name:  "DD_VERSION",
					Value: "",
				},
				{
					Name:  "KUBERPULT_ENABLE_TRACING",
					Value: "",
				},
				{
					Name:  "DD_TRACE_DEBUG",
					Value: "",
				},
			},
		},
		{
			Name: "DD Tracing enabled",
			Values: `
git:
  url: "testURL"
ingress:
  domainName: "kuberpult-example.com"
datadogTracing:
  enabled: true
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "DD_AGENT_HOST",
					Value: "",
				},
				{
					Name:  "DD_ENV",
					Value: "",
				},
				{
					Name:  "DD_SERVICE",
					Value: "",
				},
				{
					Name:  "DD_VERSION",
					Value: "",
				},
				{
					Name:  "KUBERPULT_ENABLE_TRACING",
					Value: "true",
				},
				{
					Name:  "DD_TRACE_DEBUG",
					Value: "false",
				},
			},
			ExpectedMissing: []core.EnvVar{},
		},
		{
			Name: "Two variables involved web hook disabled",
			Values: `
git:
  url: "testURL"
ingress:
  domainName: "kuberpult-example.com"
argocd:
  sendWebHooks: false
`,
			ExpectedEnvs: []core.EnvVar{
				{
					Name:  "KUBERPULT_GIT_URL",
					Value: "testURL",
				},
				{
					Name:  "KUBERPULT_ARGO_CD_SERVER",
					Value: "",
				},
			},
			ExpectedMissing: []core.EnvVar{},
		},
	}

	for _, tc := range tcs {
		tc := tc
		t.Run(tc.Name, func(t *testing.T) {
			testDirName := t.TempDir()
			outputFile := runHelm(t, []byte(tc.Values), testDirName)
			if out, err := getDeployments(outputFile); err != nil {
				t.Fatalf(fmt.Sprintf("%v", err))
			} else {
				targetDocument := out["kuberpult-cd-service"]
				for _, env := range tc.ExpectedEnvs {
					if !CheckForEnvVariable(t, env, &targetDocument) {
						t.Fatalf("Environment variable '%s' with value '%s' was expected, but not found.", env.Name, env.Value)
					}
				}
				for _, env := range tc.ExpectedMissing {
					if CheckForEnvVariable(t, env, &targetDocument) {
						t.Fatalf("Found enviroment variable '%s' with value '%s', but was not expecting it.", env.Name, env.Value)
					}
				}

			}
		})
	}
}
