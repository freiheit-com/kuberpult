# This file is part of kuberpult.

# Kuberpult is free software: you can redistribute it and/or modify
# it under the terms of the Expat(MIT) License as published by
# the Free Software Foundation.

# Kuberpult is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.

# You should have received a copy of the MIT License
# along with kuberpult. If not, see <https://directory.fsf.org/wiki/License:Expat>.

# Copyright freiheit.com


{{- if .Values.cd.tag }}
{{ fail "Values.cd.tag cannot be used anymore. We only support the same appVersion for all services at this point."}}
{{ end -}}
{{- if not (eq .Values.db.dbOption "postgreSQL") }}
{{ fail ".Values.db.dbOption does not contain a valid value (Only postgreSQL is allowed from now on)."}}
{{ end -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuberpult-cd-service
  labels:
    app: kuberpult-cd-service
{{- if .Values.datadogTracing.enabled }}
    tags.datadoghq.com/service: kuberpult-cd-service
    tags.datadoghq.com/version: {{ $.Chart.AppVersion }}
    tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
{{- end }}
spec:
  # Generally, it is possible to have multiple instances of the cd-service.
  # However, most time is spent in a `git push`, which cannot be parallelized much.
  # Having multiple instances works when there are only few requests/sec,
  # but it may get inefficient if there are many, since kuberpult then needs
  # to `pull` and `push` more often due to possible conflicts.
  # Therefore, we only allow 1 instance of the cd-service.
  # If you temporarily need 2, that will also work.
  # Having more than 1 cd-service pods may create inconsistent state in the database because some of the transformers require isolation, Ref: SRX-8JRR7Q 
  replicas: 1
  selector:
    matchLabels:
      app: kuberpult-cd-service
  template:
    metadata:
      labels:
        app: kuberpult-cd-service
{{- if .Values.datadogTracing.enabled }}
        tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
        tags.datadoghq.com/service: kuberpult-cd-service
        tags.datadoghq.com/version: {{ $.Chart.AppVersion }}
{{- end }}
      annotations:
{{- if .Values.datadogTracing.enabled }}
        apm.datadoghq.com/env: '{"DD_SERVICE":"kuberpult-cd-service","DD_ENV":"{{ .Values.datadogTracing.environment }}","DD_VERSION":"{{ $.Chart.AppVersion }}"}'
{{- end }}
{{- if .Values.cd.pod.annotations }}
{{ .Values.cd.pod.annotations | toYaml | indent 8}}
{{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- if (and (eq .Values.db.dbOption "postgreSQL") (.Values.db.k8sServiceAccountName)) }}
      serviceAccountName: {{ .Values.db.k8sServiceAccountName }}
{{- end }}
      containers:
{{- if .Values.db.cloudSqlProxyEnabled }}
      - name: cloud-sql-proxy
        # It is recommended to use the latest version of the Cloud SQL Auth Proxy
        # Make sure to update on a regular schedule!
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
        args:
          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          - "--private-ip"

          - "--quiet"

          # Replace DB_PORT with the port the proxy should listen on

          - "--port={{ .Values.db.authProxyPort }}"

          - {{ .Values.db.dbConnectionName | quote }}
        securityContext:
          # The default Cloud SQL Auth Proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        # You should use resource requests/limits as a best practice to prevent
        # pods from consuming too many resources and affecting the execution of
        # other pods. You should adjust the following values based on what your
        # application needs. For details, see
        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          requests:
            # The proxy's memory use scales linearly with the number of active
            # connections. Fewer open connections will use less memory. Adjust
            # this value based on your application's requirements.
            memory: {{ .Values.db.requests.memory }}
            # The proxy's CPU use scales linearly with the amount of IO between
            # the database and the application. Adjust this value based on your
            # application's requirements.
            cpu:  {{ .Values.db.requests.cpu }}
{{- end }}
      - name: service
        image: "{{ .Values.hub }}/{{ .Values.cd.image }}:{{ $.Chart.AppVersion }}"
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: grpc
            containerPort: 8443
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: {{ .Values.cd.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.cd.probes.readiness.periodSeconds }}
          successThreshold: {{ .Values.cd.probes.readiness.successThreshold }}
          timeoutSeconds: {{ .Values.cd.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.cd.probes.readiness.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: {{ .Values.cd.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.cd.probes.liveness.periodSeconds }}
          successThreshold: {{ .Values.cd.probes.liveness.successThreshold }}
          timeoutSeconds: {{ .Values.cd.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.cd.probes.liveness.failureThreshold }}
        resources:
          limits:
            cpu: "{{ .Values.cd.resources.limits.cpu }}"
            memory: "{{ .Values.cd.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.cd.resources.requests.cpu }}"
            memory: "{{ .Values.cd.resources.requests.memory }}"
        env:
        - name: KUBERPULT_GIT_URL
          value: {{ required ".Values.git.url is required" .Values.git.url | quote }}
        - name: KUBERPULT_GIT_BRANCH
          value: {{ .Values.git.branch | quote }}
        - name: KUBERPULT_VERSION
          value: {{ $.Chart.AppVersion | quote}}
        - name: LOG_FORMAT
          value: {{ .Values.log.format | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.log.level | quote }}
{{- if .Values.argocd.sendWebhooks }}
      {{ fail "Values.cd.webhooks cannot be used anymore. To inform Argo CD immediately about changes, see the option `manageArgoApplications.enabled`, or configure your git provider to send a webhook to Argo CD"}}
{{- end }}
        - name: KUBERPULT_ARGO_CD_INSECURE
          value: {{ .Values.argocd.insecure | quote }}
        - name: KUBERPULT_ARGO_CD_GENERATE_FILES
          value: {{ .Values.argocd.generateFiles | quote }}
        - name: KUBERPULT_GIT_WEB_URL
          value: {{ .Values.git.webUrl | quote }}
{{- if .Values.datadogTracing.enabled }}
        - name: KUBERPULT_CACHE_TTL_HOURS
          value: {{ .Values.cd.cacheTtlHours | quote }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: KUBERPULT_ENABLE_TRACING
          value: "{{ .Values.datadogTracing.enabled }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_API_KEY_LOCATION
          value: "/etc/datadog/api-key"
{{- end }}

{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_DEBUG
          value: "{{ .Values.datadogTracing.debugging }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_PARTIAL_FLUSH_ENABLED
          value: "{{ .Values.datadogTracing.partialFlushEnabled }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_PARTIAL_FLUSH_MIN_SPANS
          value: "{{ .Values.datadogTracing.partialFlushMinSpans }}"
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: KUBERPULT_ENABLE_METRICS
          value: "{{ .Values.dogstatsdMetrics.enabled }}"
        - name: KUBERPULT_ENABLE_EVENTS
          value: "{{ .Values.dogstatsdMetrics.eventsEnabled }}"
        - name: KUBERPULT_DOGSTATSD_ADDR
          value: "{{ .Values.dogstatsdMetrics.address }}"
{{- end }}
{{- if .Values.pgp.keyRing }}
        - name: KUBERPULT_PGP_KEY_RING_PATH
          value: /keyring/keyring.gpg
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
        - name: KUBERPULT_DEX_RBAC_POLICY_PATH
          value: /kuberpult-rbac/policy.csv
        - name: KUBERPULT_DEX_DEFAULT_ROLE_ENABLED
          value: "{{ .Values.auth.dexAuth.defaultRoleEnabled }}"
        - name: KUBERPULT_DEX_RBAC_TEAM_PATH
          value: /kuberpult-rbac/team.csv
{{- end }}
        - name: KUBERPULT_AZURE_ENABLE_AUTH
          value: "{{ .Values.auth.azureAuth.enabled }}"
        - name: KUBERPULT_DEX_ENABLED
          value: "{{ .Values.auth.dexAuth.enabled }}"
{{- if .Values.environment_configs.bootstrap_mode }}
        {{ fail "Values.environment_configs.bootstrap_mode cannot be used anymore. For more information [See environment.md/Environment Creation for how to create and edit environments](https://github.com/freiheit-com/kuberpult/blob/main/docs/environment.md) "}}
{{- end }}
        - name: KUBERPULT_GIT_NETWORK_TIMEOUT
          value: "{{ .Values.git.networkTimeout }}"
        - name: KUBERPULT_DISABLE_QUEUE
          value: "{{ .Values.cd.backendConfig.disableQueue }}"
        - name: KUBERPULT_GIT_WRITE_COMMIT_DATA
          value: "{{ .Values.git.enableWritingCommitData }}"
        - name: KUBERPULT_GIT_MAXIMUM_COMMITS_PER_PUSH
          value: "{{ .Values.git.maximumCommitsPerPush }}"
        - name: KUBERPULT_ENABLE_PROFILING
          value: "{{ .Values.datadogProfiling.enabled }}"
        - name: KUBERPULT_MAXIMUM_QUEUE_SIZE
          value: "{{ .Values.cd.backendConfig.queueSize }}"
        - name: KUBERPULT_MAX_NUMBER_OF_THREADS
          value: "{{ .Values.cd.maxNumberOfThreads }}"
        - name: KUBERPULT_DB_OPTION # { postgreSQL}
          value: {{ .Values.db.dbOption }}
        - name: KUBERPULT_DB_WRITE_ESL_TABLE_ONLY
          value: "false"
{{- if (eq .Values.db.dbOption "postgreSQL") }}
        - name: KUBERPULT_DB_LOCATION
          value: {{ .Values.db.location }}
        - name: KUBERPULT_DB_MIGRATIONS_LOCATION
          value: {{ .Values.db.migrations }}
{{- end }}
{{- if eq .Values.db.dbOption "postgreSQL" }}
        - name: KUBERPULT_DB_NAME
          value: "{{ .Values.db.dbName }}"
        - name: KUBERPULT_DB_USER_NAME
          valueFrom:
            secretKeyRef:
              name: kuberpult-db
              key: username
        - name: KUBERPULT_DB_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kuberpult-db
              key: password
        - name: KUBERPULT_DB_SSL_MODE
          value: "{{ .Values.db.sslMode }}"
        - name: KUBERPULT_DB_MAX_OPEN_CONNECTIONS
          value: "{{ .Values.db.connections.cd.maxOpen }}"
        - name: KUBERPULT_DB_MAX_IDLE_CONNECTIONS
          value: "{{ .Values.db.connections.cd.maxIdle }}"
        - name: KUBERPULT_CHECK_CUSTOM_MIGRATIONS
          value: "{{ .Values.db.checkCustomMigrations }}"
{{- end }}
        - name: KUBERPULT_ALLOW_LONG_APP_NAMES
          value: "{{ .Values.cd.allowLongAppNames }}"
        - name: KUBERPULT_ALLOWED_DOMAINS
          value: "{{ .Values.cd.allowedDomains }}"
        - name: KUBERPULT_RELEASE_VERSIONS_LIMIT
          value: "{{ .Values.git.releaseVersionsLimit }}"
{{- if .Values.cd.minorRegexes }}
        - name: KUBERPULT_MINOR_REGEXES
          value: {{ .Values.cd.minorRegexes | join "," | quote }}
{{- end }}
        - name: KUBERPULT_MIGRATION_SERVER
          value: kuberpult-manifest-repo-export-service:8443
        - name: KUBERPULT_MIGRATION_SERVER_SECURE
          value: "false"
        - name: KUBERPULT_GRPC_MAX_RECV_MSG_SIZE
          value: "{{ .Values.cd.grpcMaxRecvMsgSize }}"
        volumeMounts:
{{- if (eq .Values.db.dbOption "postgreSQL") }}
        - name: migrations
          mountPath: {{ .Values.db.migrations }}
          readOnly: false
{{- end }}
        - name: repository
          mountPath: /repository
        - name: ssh
          mountPath: /etc/ssh
{{- if .Values.datadogProfiling.enabled }}
        - name: datadog
          mountPath: /etc/datadog/
{{- end }}
{{- if .Values.pgp.keyRing }}
        - name: keyring
          mountPath: /keyring
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
        - name: kuberpult-rbac
          mountPath: /kuberpult-rbac
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: dsdsocket
          mountPath: {{ .Values.dogstatsdMetrics.hostSocketPath }}
          readOnly: true
{{- end }}
      volumes:
      - name: repository
        # We use emptyDir, because none of our data needs to survive for long (it's all in the github repo).
        # EmptyDir has the nice advantage, that it triggers a restart of the pod and creates a new volume when the current one is full
        # Because of an issue in gitlib2, this actually happens.
        emptyDir:
          sizeLimit: {{ .Values.git.emptyDirSize }}
      - name: ssh
        secret:
          secretName: kuberpult-ssh
{{- if .Values.datadogProfiling.enabled }}
      - name: datadog
        secret:
          secretName: kuberpult-datadog
{{- end }}
{{- if .Values.pgp.keyRing }}
      - name: keyring
        configMap:
          name: kuberpult-keyring
{{- end }}
{{- if eq .Values.db.dbOption "postgreSQL" }}
      - name: migrations
        configMap:
          name: kuberpult-migrations-cloudsql
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
      - name: kuberpult-rbac
        configMap:
          name: kuberpult-rbac
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
      - name: dsdsocket
        hostPath:
          path: {{ .Values.dogstatsdMetrics.hostSocketPath }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kuberpult-cd-service
  annotations:
{{- if .Values.cd.backendConfig.create }}
    cloud.google.com/backend-config: '{"default": "kuberpult-cd-service"}'
{{- end }}
{{- if .Values.cd.service.annotations }}
{{ .Values.cd.service.annotations | toYaml | indent 4}}
{{- end }}
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: grpc
    port: 8443
    targetPort: grpc
  selector:
    app: kuberpult-cd-service
  type: NodePort
---
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-ssh
data:
  identity: {{ .Values.ssh.identity | b64enc | quote }}
  ssh_known_hosts: {{ .Values.ssh.known_hosts | b64enc | quote }}
---
{{- if .Values.datadogProfiling.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-datadog
data:
  api-key: {{ .Values.datadogProfiling.apiKey | b64enc | quote }}
---
{{- end }}

{{- if .Values.pgp.keyRing }}
{{- if not (mustRegexMatch "^-----BEGIN PGP PUBLIC KEY BLOCK-----" .Values.pgp.keyRing) }}
{{ fail "The pgp keyring is invalid. Please export it using `gpg --armor --export`"}}
{{ end -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuberpult-keyring
data:
  keyring.gpg: {{ .Values.pgp.keyRing | quote }}
---
{{- end }}
{{- if .Values.cd.backendConfig.create }}
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: kuberpult-cd-service
spec:
  healthCheck:
    type: HTTP
    requestPath: /healthz
  timeoutSec: {{ .Values.cd.backendConfig.timeoutSec }}
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuberpult-rbac
data:
  policy.csv: {{ .Values.auth.dexAuth.policy_csv | quote}}
  team.csv: {{ .Values.auth.dexAuth.team_csv| quote}}
{{- end }}
{{- if eq .Values.db.dbOption "postgreSQL" }}
---
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-db
data:
  username: {{ .Values.db.dbUser | b64enc | quote }}
  password: {{ .Values.db.dbPassword | b64enc | quote }}
{{- end }}
