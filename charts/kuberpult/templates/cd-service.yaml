# This file is part of kuberpult.

# Kuberpult is free software: you can redistribute it and/or modify
# it under the terms of the Expat(MIT) License as published by
# the Free Software Foundation.

# Kuberpult is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.

# You should have received a copy of the MIT License
# along with kuberpult. If not, see <https://directory.fsf.org/wiki/License:Expat>.

# Copyright 2023 freiheit.com
# This file is part of kuberpult.

# Kuberpult is free software: you can redistribute it and/or modify
# it under the terms of the Expat(MIT) License as published by
# the Free Software Foundation.

# Kuberpult is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.

# You should have received a copy of the MIT License
# along with kuberpult. If not, see <https://directory.fsf.org/wiki/License:Expat>.

# Copyright 2023 freiheit.com

{{- if .Values.cd.tag }}
{{ fail "Values.cd.tag cannot be used anymore. We only support the same appVersion for all services at this point."}}
{{ end -}}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuberpult-cd-service
  labels:
    app: kuberpult-cd-service
{{- if .Values.datadogTracing.enabled }}
    tags.datadoghq.com/service: kuberpult-cd-service
    tags.datadoghq.com/version: {{ $.Chart.AppVersion }}
    tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
{{- end }}
spec:
  # Generally, it is possible to have multiple instances of the cd-service.
  # However, most time is spent in a `git push`, which cannot be parallelized much.
  # Having multiple instances works when there are only few requests/sec,
  # but it may get inefficient if there are many, since kuberpult then needs
  # to `pull` and `push` more often due to possible conflicts.
  # Therefore, we only allow 1 instance of the cd-service.
  # If you temporarily need 2, that will also work.
  replicas: 1
  selector:
    matchLabels:
      app: kuberpult-cd-service
  template:
    metadata:
      labels:
        app: kuberpult-cd-service
{{- if .Values.datadogTracing.enabled }}
        tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
        tags.datadoghq.com/service: kuberpult-cd-service
        tags.datadoghq.com/version: {{ $.Chart.AppVersion }}
      annotations:
        apm.datadoghq.com/env: '{"DD_SERVICE":"kuberpult-cd-service","DD_ENV":"{{ .Values.datadogTracing.environment }}","DD_VERSION":"{{ $.Chart.AppVersion }}"}'
{{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: service
        image: "{{ .Values.hub }}/{{ .Values.cd.image }}:{{ $.Chart.AppVersion }}"
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: grpc
            containerPort: 8443
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: {{ .Values.cd.probes.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.cd.probes.readiness.periodSeconds }}
          successThreshold: {{ .Values.cd.probes.readiness.successThreshold }}
          timeoutSeconds: {{ .Values.cd.probes.readiness.timeoutSeconds }}
          failureThreshold: {{ .Values.cd.probes.readiness.failureThreshold }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: {{ .Values.cd.probes.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.cd.probes.liveness.periodSeconds }}
          successThreshold: {{ .Values.cd.probes.liveness.successThreshold }}
          timeoutSeconds: {{ .Values.cd.probes.liveness.timeoutSeconds }}
          failureThreshold: {{ .Values.cd.probes.liveness.failureThreshold }}
        resources:
          limits:
            cpu: "{{ .Values.cd.resources.limits.cpu }}"
            memory: "{{ .Values.cd.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.cd.resources.requests.cpu }}"
            memory: "{{ .Values.cd.resources.requests.memory }}"
        env:
        - name: KUBERPULT_GIT_URL
          value: {{ required ".Values.git.url is required" .Values.git.url | quote }}
        - name: KUBERPULT_GIT_BRANCH
          value: {{ .Values.git.branch | quote }}
        - name: LOG_FORMAT
          value: {{ .Values.log.format | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.log.level | quote }}
{{- if .Values.argocd.sendWebhooks }}
        - name: KUBERPULT_ARGO_CD_SERVER
          value: {{ .Values.argocd.server | quote }}
{{- else }}
        - name: KUBERPULT_ARGO_CD_SERVER
          value: ""
{{- end }}
        - name: KUBERPULT_ARGO_CD_INSECURE
          value: {{ .Values.argocd.insecure | quote }}
        - name: KUBERPULT_ARGO_CD_GENERATE_FILES
          value: {{ .Values.argocd.generateFiles | quote }}
        - name: KUBERPULT_GIT_WEB_URL
          value: {{ .Values.git.webUrl | quote }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: KUBERPULT_ENABLE_TRACING
          value: "{{ .Values.datadogTracing.enabled }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_API_KEY_LOCATION
          value: "/etc/datadog/api-key"
{{- end }}

{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_DEBUG
          value: "{{ .Values.datadogTracing.debugging }}"
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: KUBERPULT_ENABLE_METRICS
          value: "{{ .Values.dogstatsdMetrics.enabled }}"
        - name: KUBERPULT_ENABLE_EVENTS
          value: "{{ .Values.dogstatsdMetrics.eventsEnabled }}"
        - name: KUBERPULT_DOGSTATSD_ADDR
          value: "{{ .Values.dogstatsdMetrics.address }}"
{{- end }}
{{- if .Values.pgp.keyRing }}
        - name: KUBERPULT_PGP_KEY_RING_PATH
          value: /keyring/keyring.gpg
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
        - name: KUBERPULT_DEX_RBAC_POLICY_PATH
          value: /kuberpult-rbac/policy.csv
{{- end }}
        - name: KUBERPULT_AZURE_ENABLE_AUTH
          value: "{{ .Values.auth.azureAuth.enabled }}"
        - name: KUBERPULT_DEX_ENABLED
          value: "{{ .Values.auth.dexAuth.enabled }}"
{{- if .Values.environment_configs.bootstrap_mode }}
        - name: KUBERPULT_BOOTSTRAP_MODE
          value: "{{ .Values.environment_configs.bootstrap_mode }}"
{{- end }}
        - name: KUBERPULT_ENABLE_SQLITE
          value: "{{ .Values.cd.enableSqlite }}"
        - name: KUBERPULT_GIT_NETWORK_TIMEOUT
          value: "{{ .Values.git.networkTimeout }}"
        - name: KUBERPULT_GIT_WRITE_COMMIT_DATA
          value: "{{ .Values.git.enableWritingCommitData }}"
        - name: KUBERPULT_GIT_MAXIMUM_COMMITS_PER_PUSH
          value: "{{ .Values.git.maximumCommitsPerPush }}"
        - name: KUBERPULT_ENABLE_PROFILING
          value: "{{ .Values.datadogProfiling.enabled }}"
        - name: KUBERPULT_MAXIMUM_QUEUE_SIZE
          value: "{{ .Values.cd.backendConfig.queueSize }}"
        volumeMounts:
        - name: repository
          mountPath: /repository
        - name: ssh
          mountPath: /etc/ssh
{{- if .Values.datadogProfiling.enabled }}
        - name: datadog
          mountPath: /etc/datadog/
{{- end }}
{{- if .Values.pgp.keyRing }}
        - name: keyring
          mountPath: /keyring
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
        - name: kuberpult-rbac
          mountPath: /kuberpult-rbac
{{- end }} 
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: dsdsocket
          mountPath: {{ .Values.dogstatsdMetrics.hostSocketPath }}
          readOnly: true
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
        - name: environment-configs
          mountPath: /environment_configs.json
          subPath: environment_configs.json
{{- end }}
      volumes:
      - name: repository
        # We use emptyDir, because none of our data needs to survive for long (it's all in the github repo).
        # EmptyDir has the nice advantage, that it triggers a restart of the pod and creates a new volume when the current one is full
        # Because of an issue in gitlib2, this actually happens.
        emptyDir:
          sizeLimit: 10Gi
      - name: ssh
        secret:
          secretName: kuberpult-ssh
{{- if .Values.datadogProfiling.enabled }}
      - name: datadog
        secret:
          secretName: kuberpult-datadog
{{- end }}
{{- if .Values.pgp.keyRing }}
      - name: keyring
        configMap:
          name: kuberpult-keyring
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
      - name: environment-configs
        configMap:
          items:
          - key: environment_configs.json
            path: environment_configs.json
          name: environment-configs
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
      - name: kuberpult-rbac
        configMap:
          name: kuberpult-rbac
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
      - name: dsdsocket
        hostPath:
          path: {{ .Values.dogstatsdMetrics.hostSocketPath }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kuberpult-cd-service
  {{- if .Values.cd.backendConfig.create }}
  annotations:
    cloud.google.com/backend-config: '{"default": "kuberpult-cd-service"}'
  {{- end }}
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: grpc
    port: 8443
    targetPort: grpc
  selector:
    app: kuberpult-cd-service
  type: NodePort
---
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-ssh
data:
  identity: {{ .Values.ssh.identity | b64enc | quote }}
  ssh_known_hosts: {{ .Values.ssh.known_hosts | b64enc | quote }}
---
{{- if .Values.datadogProfiling.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-datadog
data:
  api-key: {{ .Values.datadogProfiling.apiKey | b64enc | quote }}
---
{{- end }}

{{- if .Values.pgp.keyRing }}
{{- if not (mustRegexMatch "^-----BEGIN PGP PUBLIC KEY BLOCK-----" .Values.pgp.keyRing) }}
{{ fail "The pgp keyring is invalid. Please export it using `gpg --armor --export`"}}
{{ end -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuberpult-keyring
data:
  keyring.gpg: {{ .Values.pgp.keyRing | quote }}
---
{{- end }}
{{- if .Values.cd.backendConfig.create }}
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: kuberpult-cd-service
spec:
  healthCheck:
    type: HTTP
    requestPath: /healthz
  timeoutSec: {{ .Values.cd.backendConfig.timeoutSec }}
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment-configs
data:
  environment_configs.json: {{ required ".Values.environment_configs.environment_configs_json is required when .Values.environment_configs.bootstrap is true" .Values.environment_configs.environment_configs_json | quote }}
{{- end }}
{{- if .Values.auth.dexAuth.enabled }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuberpult-rbac
data:
  policy.csv: {{ .Values.auth.dexAuth.policy_csv | quote}}
{{- end }}
