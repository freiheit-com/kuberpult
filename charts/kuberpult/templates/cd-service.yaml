#This file is part of kuberpult.

#Kuberpult is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#Kuberpult is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with kuberpult.  If not, see <http://www.gnu.org/licenses/>.

#Copyright 2021 freiheit.com
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kuberpult-cd-service
  labels:
    app: kuberpult-cd-service
{{- if .Values.datadogTracing.enabled }}
    tags.datadoghq.com/service: kuberpult-cd-service
    tags.datadoghq.com/version: {{ .Values.tag }}
    tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
{{- end }}
spec:
  serviceName: kuberpult-cd-service
  replicas: 1
  selector:
    matchLabels:
      app: kuberpult-cd-service
  template:
    metadata:
      labels:
        app: kuberpult-cd-service
{{- if .Values.datadogTracing.enabled }}
        tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
        tags.datadoghq.com/service: kuberpult-cd-service
        tags.datadoghq.com/version: {{ .Values.tag }}
      annotations:
        apm.datadoghq.com/env: '{"DD_SERVICE":"kuberpult-cd-service","DD_ENV":"{{ .Values.datadogTracing.environment }}","DD_VERSION":"{{ .Values.tag }}"}'
{{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      containers:
      - name: service
        image: "{{ .Values.hub }}/{{ .Values.cd.image }}:{{ .Values.tag }}"
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: grpc
            containerPort: 8443
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /health
            port: http
        resources:
          limits:
            cpu: "{{ .Values.cd.resources.limits.cpu }}"
            memory: "{{ .Values.cd.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.cd.resources.requests.cpu }}"
            memory: "{{ .Values.cd.resources.requests.memory }}"
        env:
        - name: KUBERPULT_GIT_URL
          value: {{ required ".Values.git.url is required" .Values.git.url | quote }}
        - name: KUBERPULT_GIT_BRANCH
          value: {{ .Values.git.branch | quote }}
        - name: LOG_FORMAT
          value: {{ .Values.log.format | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.log.level | quote }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: KUBERPULT_ENABLE_TRACING
          value: "{{ .Values.datadogTracing.enabled }}"
{{- end }}

{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_DEBUG
          value: "{{ .Values.datadogTracing.debugging }}"
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: KUBERPULT_ENABLE_METRICS
          value: "{{ .Values.dogstatsdMetrics.enabled }}"
        - name: KUBERPULT_DOGSTATSD_ADDR
          value: "{{ .Values.dogstatsdMetrics.address }}"
{{- end }}
{{- if .Values.pgp.keyRing }}
        - name: KUBERPULT_PGP_KEY_RING
          value: /keyring/keyring.gpg
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
        - name: KUBERPULT_BOOTSTRAP_MODE
          value: "{{ .Values.environment_configs.bootstrap_mode }}"
{{- end }}
        volumeMounts:
        - name: repository
          mountPath: /repository
        - name: ssh
          mountPath: /etc/ssh
{{- if .Values.pgp.keyRing }}
        - name: keyring
          mountPath: /keyring
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: dsdsocket
          mountPath: {{ .Values.dogstatsdMetrics.hostSocketPath }}
          readOnly: true
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
        - name: environment-configs
          mountPath: /environment_configs.json
          subPath: environment_configs.json
{{- end }}
      volumes:
      - name: repository
        # We use emptyDir, because none of our data needs to survive for long (it's all in the github repo).
        # EmptyDir has the nice advantage, that it triggers a restart of the pod and creates a new volume when the current one is full
        # Because of an issue in gitlib2, this actually happens.
        emptyDir:
          sizeLimit: 10G
      - name: ssh
        secret:
          secretName: kuberpult-ssh
{{- if .Values.pgp.keyRing }}
      - name: keyring
        configMap:
          name: kuberpult-keyring
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
      - name: environment-configs
        configMap:
          items: 
          - key: environment_configs.json
            path: environment_configs.json
          name: environment-configs
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
      - name: dsdsocket
        hostPath:
          path: {{ .Values.dogstatsdMetrics.hostSocketPath }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kuberpult-cd-service
  {{- if .Values.cd.backendConfig.create }}
  annotations:
    cloud.google.com/backend-config: '{"default": "kuberpult-cd-service"}'
  {{- end }}
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: grpc
    port: 8443
    targetPort: grpc
  selector:
    app: kuberpult-cd-service
  type: NodePort
---
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-ssh
data:
  identity: {{ .Values.ssh.identity | b64enc | quote }}
  ssh_known_hosts: {{ .Values.ssh.known_hosts | b64enc | quote }}
---
{{- if .Values.pgp.keyRing }}
{{- if not (mustRegexMatch "^-----BEGIN PGP PUBLIC KEY BLOCK-----" .Values.pgp.keyRing) }}
{{ fail "The pgp keyring is invalid. Please export it using `gpg --armor --export`"}}
{{ end -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: kuberpult-keyring
data:
  keyring.gpg: {{ .Values.pgp.keyRing | quote }}
---
{{- end }}
{{- if .Values.cd.backendConfig.create }}
---
apiVersion: cloud.google.com/v1beta1
kind: BackendConfig
metadata:
  name: kuberpult-cd-service
spec:
  healthCheck:
    type: HTTP
    requestPath: /health
  timeoutSec: {{ .Values.cd.backendConfig.timeoutSec }}
{{- end }}

{{- if .Values.argocd.enabled }}
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-argocd
type: Opaque
data:
  KUBERPULT_ARGO_CD_PASS: {{ .Values.argocd.password | b64enc }}
{{- end }}
{{- if .Values.environment_configs.bootstrap_mode }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: environment-configs 
data:
  environment_configs.json: {{ required ".Values.environment_configs.environment_configs_json is required when .Values.environment_configs.bootstrap is true" .Values.environment_configs.environment_configs_json | quote }}
{{- end }}

