# This file is part of kuberpult.

# Kuberpult is free software: you can redistribute it and/or modify
# it under the terms of the Expat(MIT) License as published by
# the Free Software Foundation.

# Kuberpult is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# MIT License for more details.

# You should have received a copy of the MIT License
# along with kuberpult. If not, see <https://directory.fsf.org/wiki/License:Expat>.

# Copyright freiheit.com
# This file is part of kuberpult.
{{- if .Values.rollout.tag }}
{{ fail "Values.rollout.tag cannot be used anymore. We only support the same appVersion for all services at this point."}}
{{ end -}}

{{- if .Values.rollout.enabled }}
{{- if not (regexMatch "^https?://[^:]+:[0-9]+$" .Values.argocd.server) -}}
{{ fail "argocd.server must be a valid http/https url including the port"}}
{{- end -}}
{{- if not (eq .Values.argocd.refreshEnabled nil) }}
{{ fail "argocd.refreshEnabled is removed in favour of argocd.refresh.enabled"}}
{{- end -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kuberpult-rollout-service
  labels:
    app: kuberpult-rollout-service
{{- if .Values.datadogTracing.enabled }}
    tags.datadoghq.com/service: kuberpult-rollout-service
    tags.datadoghq.com/version: {{ $.Chart.AppVersion }}
    tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
{{- end }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kuberpult-rollout-service
  template:
    metadata:
      labels:
        app: kuberpult-rollout-service
{{- if .Values.datadogTracing.enabled }}
        tags.datadoghq.com/env: {{ .Values.datadogTracing.environment }}
        tags.datadoghq.com/service: kuberpult-rollout-service
        tags.datadoghq.com/version: {{ $.Chart.AppVersion }}
{{- end }}
      annotations:
{{- if .Values.datadogTracing.enabled }}
        apm.datadoghq.com/env: '{"DD_SERVICE":"kuberpult-rollout-service","DD_ENV":"{{ .Values.datadogTracing.environment }}","DD_VERSION":"{{ $.Chart.AppVersion }}"}'
{{- end }}
{{- if .Values.rollout.pod.annotations}}
{{ .Values.rollout.pod.annotations | toYaml | indent 8}}
{{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- if (and (eq .Values.db.dbOption "postgreSQL") (.Values.db.k8sServiceAccountName)) }}
      serviceAccountName: {{ .Values.db.k8sServiceAccountName }}
{{- end }}
      containers:
{{- if .Values.db.cloudSqlProxyEnabled }}
      - name: cloud-sql-proxy
        # It is recommended to use the latest version of the Cloud SQL Auth Proxy
        # Make sure to update on a regular schedule!
        image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.11.0
        args:
          # If connecting from a VPC-native GKE cluster, you can use the
          # following flag to have the proxy connect over private IP
          - "--private-ip"

          # Enable structured logging with LogEntry format:
          - "--structured-logs"

          # Replace DB_PORT with the port the proxy should listen on

          - "--port={{ .Values.db.authProxyPort }}"

          - {{ .Values.db.dbConnectionName | quote }}
        securityContext:
          # The default Cloud SQL Auth Proxy image runs as the
          # "nonroot" user and group (uid: 65532) by default.
          runAsNonRoot: true
        # You should use resource requests/limits as a best practice to prevent
        # pods from consuming too many resources and affecting the execution of
        # other pods. You should adjust the following values based on what your
        # application needs. For details, see
        # https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        resources:
          requests:
            # The proxy's memory use scales linearly with the number of active
            # connections. Fewer open connections will use less memory. Adjust
            # this value based on your application's requirements.
            memory: {{ .Values.db.requests.memory }}
            # The proxy's CPU use scales linearly with the amount of IO between
            # the database and the application. Adjust this value based on your
            # application's requirements.
            cpu:  {{ .Values.db.requests.cpu }}
{{- end }}
      - name: service
        image: "{{ .Values.hub }}/{{ .Values.rollout.image }}:{{ $.Chart.AppVersion }}"
        ports:
          - name: http
            containerPort: 8080
            protocol: TCP
          - name: grpc
            containerPort: 8443
            protocol: TCP
        readinessProbe:
          httpGet:
            path: /healthz
            port: http
          initialDelaySeconds: 5
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /healthz
            port: http
        resources:
          limits:
            cpu: "{{ .Values.rollout.resources.limits.cpu }}"
            memory: "{{ .Values.rollout.resources.limits.memory }}"
          requests:
            cpu: "{{ .Values.rollout.resources.requests.cpu }}"
            memory: "{{ .Values.rollout.resources.requests.memory }}"
        env:
        - name: KUBERPULT_CDSERVER
          value: kuberpult-cd-service:8443
        - name: KUBERPULT_VERSIONSERVER
          value: kuberpult-cd-service:8443
        - name: KUBERPULT_ARGOCD_SERVER
          value: {{ .Values.argocd.server | quote }}
        - name: KUBERPULT_ARGOCD_INSECURE
          value: {{ .Values.argocd.insecure | quote }}
        - name: KUBERPULT_ARGOCD_REFRESH_ENABLED
          value: {{ .Values.argocd.refresh.enabled | quote }}
        - name: KUBERPULT_ARGOCD_REFRESH_CONCURRENCY
          value: {{ .Values.argocd.refresh.concurrency | quote }}
        - name: KUBERPULT_ARGOCD_REFRESH_CLIENT_TIMEOUT_SECONDS
          value: {{ .Values.argocd.refresh.clientTimeoutSeconds | quote }}
        - name: KUBERPULT_MANAGE_ARGO_APPLICATIONS_ENABLED
          value: {{ .Values.manageArgoApplications.enabled | quote }}
        - name: KUBERPULT_MANAGE_ARGO_APPLICATIONS_FILTER
          value: {{ .Values.manageArgoApplications.filter | quote }}
        - name: LOG_FORMAT
          value: {{ .Values.log.format | quote }}
        - name: LOG_LEVEL
          value: {{ .Values.log.level | quote }}
        - name: KUBERPULT_DB_LOCATION
          value: "{{ .Values.db.location }}"
        - name: KUBERPULT_DB_MIGRATIONS_LOCATION
          value: {{ .Values.db.migrations }}
        - name: KUBERPULT_DB_NAME
          value: "{{ .Values.db.dbName }}"
        - name: KUBERPULT_DB_USER_NAME
          valueFrom:
            secretKeyRef:
              name: kuberpult-db
              key: username
        - name: KUBERPULT_DB_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kuberpult-db
              key: password
        - name: KUBERPULT_DB_SSL_MODE
          value: "{{ .Values.db.sslMode }}"
        - name: KUBERPULT_DB_OPTION # { NO_DB, postgreSQL}
          value: {{ .Values.db.dbOption }}
        - name: KUBERPULT_DB_AUTH_PROXY_PORT
          value: "{{ .Values.db.authProxyPort }}"
        - name: KUBERPULT_DB_MAX_OPEN_CONNECTIONS
          value: "{{ .Values.db.connections.manifestRepoExport.maxOpen }}"
        - name: KUBERPULT_DB_MAX_IDLE_CONNECTIONS
          value: "{{ .Values.db.connections.manifestRepoExport.maxIdle }}"
{{- if .Values.datadogTracing.enabled }}
        - name: DD_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: DD_ENV
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/env']
        - name: DD_SERVICE
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/service']
        - name: DD_VERSION
          valueFrom:
            fieldRef:
              fieldPath: metadata.labels['tags.datadoghq.com/version']
        - name: KUBERPULT_ENABLE_TRACING
          value: "{{ .Values.datadogTracing.enabled }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_DEBUG
          value: "{{ .Values.datadogTracing.debugging }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_PARTIAL_FLUSH_ENABLED
          value: "{{ .Values.datadogTracing.partialFlushEnabled }}"
{{- end }}
{{- if .Values.datadogTracing.enabled }}
        - name: DD_TRACE_PARTIAL_FLUSH_MIN_SPANS
          value: "{{ .Values.datadogTracing.partialFlushMinSpans }}"
{{- end }}
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: KUBERPULT_ENABLE_METRICS
          value: "{{ .Values.dogstatsdMetrics.enabled }}"
        - name: KUBERPULT_DOGSTATSD_ADDR
          value: "{{ .Values.dogstatsdMetrics.address }}"
{{- end }}
        - name: KUBERPULT_ARGOCD_TOKEN
          valueFrom:
            secretKeyRef:
              name: kuberpult-rollout-service
              key: KUBERPULT_ARGOCD_TOKEN
        - name: KUBERPULT_REVOLUTION_DORA_ENABLED
          value: {{ .Values.revolution.dora.enabled | quote }}
        - name: KUBERPULT_REVOLUTION_DORA_URL
          value: {{ .Values.revolution.dora.url | quote }}
        - name: KUBERPULT_REVOLUTION_DORA_CONCURRENCY
          value: {{ .Values.revolution.dora.concurrency | quote }}
        - name: KUBERPULT_REVOLUTION_DORA_TOKEN
          valueFrom:
            secretKeyRef:
              name: kuberpult-rollout-service
              key: KUBERPULT_REVOLUTION_DORA_TOKEN
        - name: KUBERPULT_REVOLUTION_DORA_MAX_EVENT_AGE
          value: "2h"
        - name: KUBERPULT_GRPC_MAX_RECV_MSG_SIZE
          value: "{{ .Values.rollout.grpcMaxRecvMsgSize }}"
        - name: KUBERPULT_DB_OPTION
          value: {{ .Values.db.dbOption }} # { postgreSQL}
        - name: KUBERPULT_DB_WRITE_ESL_TABLE_ONLY
          value: "false"
{{- if (eq .Values.db.dbOption "postgreSQL") }}
        - name: KUBERPULT_DB_LOCATION
          value: {{ .Values.db.location }}
        - name: KUBERPULT_DB_NAME
          value: "{{ .Values.db.dbName }}"
        - name: KUBERPULT_DB_SSL_MODE
          value: "{{ .Values.db.sslMode }}"
        - name: KUBERPULT_DB_USER_NAME
          valueFrom:
            secretKeyRef:
              name: kuberpult-db
              key: username
        - name: KUBERPULT_DB_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: kuberpult-db
              key: password
        - name: KUBERPULT_DB_MAX_OPEN_CONNECTIONS
          value: "{{ .Values.db.connections.cd.maxOpen }}"
        - name: KUBERPULT_DB_MAX_IDLE_CONNECTIONS
          value: "{{ .Values.db.connections.cd.maxIdle }}"
{{- end }}
        volumeMounts:
        # We need to mount a writeable tmp directory for argocd connections to work correctly. https://github.com/argoproj/argo-cd/issues/14115
        - name: tmp
          mountPath: /tmp
          readOnly: false
{{- if .Values.dogstatsdMetrics.enabled }}
        - name: dsdsocket
          mountPath: {{ .Values.dogstatsdMetrics.hostSocketPath }}
          readOnly: true
{{- end }}
      volumes:
      - name: tmp
        emptyDir: {}
{{- if .Values.dogstatsdMetrics.enabled }}
      - name: dsdsocket
        hostPath:
          path: {{ .Values.dogstatsdMetrics.hostSocketPath }}
{{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: kuberpult-rollout-service
{{- if .Values.rollout.service.annotations }}
  annotations:
{{ .Values.rollout.service.annotations | toYaml | indent 4}}
{{- end }}
spec:
  ports:
  - name: http
    port: 80
    targetPort: http
  - name: grpc
    port: 8443
    targetPort: grpc
  selector:
    app: kuberpult-rollout-service
  type: NodePort
---
apiVersion: v1
kind: Secret
metadata:
  name: kuberpult-rollout-service
type: Opaque
data:
  KUBERPULT_ARGOCD_TOKEN: {{ .Values.argocd.token | b64enc | quote }}
  KUBERPULT_REVOLUTION_DORA_TOKEN: {{ .Values.revolution.dora.token | b64enc | quote }}
{{- end }}
