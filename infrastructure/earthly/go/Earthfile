VERSION 0.8

DEPS:
    FUNCTION
    ARG --required service
    ARG --required src_files
    BUILD ../../../pkg+deps
    COPY ../../../pkg+artifacts/pkg pkg
    COPY cmd services/$service/cmd
    FOR src IN $src_files
        COPY $src services/$service/$src
    END

COMPILE:
    FUNCTION
    ARG USERARCH
    ARG main_path="cmd/server"
    ARG cgo_enabled=0
    CACHE --sharing locked --id go-cache $(go env GOCACHE)
    RUN cd $main_path && \
        CGO_ENABLED=$cgo_enabled \
        GOARCH=$USERARCH \
	    GOOS=linux \
        go build -o bin/main .

    IF [ "$cgo_enabled" = "1" ]
        RUN bash -c "ldd $main_path/bin/main | tr -s [:blank:] '\n' | grep ^/ | xargs -I % install -D % $main_path/%"
        SAVE ARTIFACT $main_path/lib/
        IF [ "$USERARCH" != "arm64" ]
            SAVE ARTIFACT --if-exists $main_path/usr/
        END
    END

    SAVE ARTIFACT $main_path/bin/main

UNIT_TEST:
    FUNCTION
    ARG GO_TEST_ARGS
    ARG use_docker="true"
    CACHE --sharing locked --id go-cache $(go env GOCACHE)
    COPY pkg pkg

    IF [ "$use_docker" = "true" ]
        WITH DOCKER --compose ../../docker-compose-unittest.yml
            RUN --no-cache \
                echo "Started docker compose for unit tests." ;\
                go test $GO_TEST_ARGS ./... -coverprofile=coverage.out
        END
    ELSE
        RUN go test $GO_TEST_ARGS ./... -coverprofile=coverage.out
    END

    RUN go tool cover -html=coverage.out -o coverage.html
    SAVE ARTIFACT coverage.html AS LOCAL coverage.html

BENCH_TEST:
    FUNCTION
    ARG GO_TEST_ARGS
    CACHE --sharing locked --id go-cache $(go env GOCACHE)
    COPY pkg pkg
    RUN go test $GO_TEST_ARGS -bench=. ./...

LINT:
    FUNCTION
    CACHE --sharing locked --id go-cache $(go env GOCACHE)
    CACHE --sharing locked --id lint-cache /root/.cache/golangci-lint
    ARG FILES_TO_FORMAT=$(gofmt -l ./)
    ARG skip_lint_errors="false"
    IF [ ! -z "$FILES_TO_FORMAT" ]
        RUN echo "Formatting required for:\n$FILES_TO_FORMAT\nRun \"go fmt ./...\" to fix the errors" && exit 1
    END
    RUN golangci-lint run --timeout=15m -j4 --tests=false --skip-files=".*\.pb\.go$" ./... || $skip_lint_errors

    RUN exhaustruct -test=false $(go list ./... | grep -v "github.com/freiheit-com/kuberpult/pkg/api")

DOCKER:
    FUNCTION
    ARG UID=1000
    ARG USERARCH
    ARG entry_point="/main"
    ARG workdir=/kp
    ARG cgo_enabled=0
    ARG --required service
    ENV TZ=Europe/Berlin
    
    RUN adduser --disabled-password --home "/kp" --uid $UID kp
    RUN chown -R kp:kp /kp

    COPY ../../../services/$service+artifacts/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt
    COPY ../../../services/$service+artifacts/zoneinfo /usr/share/zoneinfo
    COPY ../../../services/$service+compile/main /main
    COPY ../../..+migration-deps/migrations /migrations
    IF [  "$cgo_enabled" = "1" ]
        COPY ../../../services/$service+compile/lib/* /lib
        IF [ "$USERARCH" != "arm64" ]
            COPY --if-exists ../../../services/$service+compile/usr/* /lib
        END
    END

    USER kp
    WORKDIR $workdir
    
    ARG --required image_tag
    ARG use_datadog=false
    IF [ "$use_datadog" == "true" ]
        ARG dd_service=$service
        ARG dd_env="cloudrun"

        ENV DD_SERVICE=$dd_service
        ENV DD_ENV=$dd_env
        ENV DD_VERSION=$image_tag

        COPY +datadog-wrapper/datadog-init /app/datadog-init
        ENTRYPOINT ["/app/datadog-init"]
    END

    CMD "$entry_point"
    SAVE IMAGE $image_tag

RELEASE:
    FUNCTION
    ARG --required image_tag
    SAVE IMAGE --push $image_tag

datadog-wrapper:
    FROM datadog/serverless-init:1-alpine
    SAVE ARTIFACT /datadog-init
