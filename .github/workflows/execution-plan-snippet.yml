name: "Execution Plan"
on:
  workflow_call:
    inputs:
      trigger:
        required: true
        type: string
        description: 'The trigger which calls the workflow, one of [pull-request, main, tag]'

jobs:
  execution_plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: google-github-actions/auth@v0 
        name: 'Authenticate to Google Cloud'
        with:
          credentials_json: ${{ secrets.FDC_CORE_CI_IMAGE_READER }} 
      - name: gcloud authorize
        run: |
          gcloud auth configure-docker
      - run: mkdir -p artifacts/
      - name: Plan execution pull request
        if: inputs.trigger == 'pull-request'
        run: |
          ./infrastructure/scripts/execution-plan/plan-pr.sh ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > artifacts/execution-plan.json 
      - name: Plan execution main
        if: inputs.trigger == 'main' || inputs.trigger == 'tag'
        run: |
          ./infrastructure/scripts/execution-plan/plan-main.sh > artifacts/execution-plan.json 
      - name: Print execution plan 
        run: |
          cat artifacts/execution-plan.json
      - name: Convert plan to github specific format
        id: plan
        run: |
          GITHUB_CONVERTOR_IMAGE="eu.gcr.io/freiheit-core/images/github-convertor:1.0-scratch-NG-0"
          cat artifacts/execution-plan.json | docker run -i "${GITHUB_CONVERTOR_IMAGE}" > artifacts/github-convertor.json
          echo "::set-output name=matrix::$(cat artifacts/github-convertor.json | tr -d '\n')"
      - name: Print github converted plan
        run: |
          cat artifacts/github-convertor.json
      - uses: actions/upload-artifact@v3
        name: Upload execution plan
        with:
          name: execution-plan.json
          path: |
            artifacts/execution-plan.json
            artifacts/github-convertor.json
    outputs:
      matrix: ${{ steps.plan.outputs.matrix }}

  build_and_publish:
    needs: [execution_plan]
    strategy:
      matrix: 
        data: ${{fromJSON(needs.execution_plan.outputs.matrix).buildable}}
    name: ${{ matrix.data.directory }} - Build and Publish
    runs-on: ubuntu-latest
    container: 
      image: ${{ matrix.data.image }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set version pr/main
        if: inputs.trigger == 'pull-request' || inputs.trigger == 'main'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "VERSION=$(make version)" >> $GITHUB_ENV
      - name: Set version tag
        if: inputs.trigger == 'tag'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}"  >> $GITHUB_ENV
      - name: Add credentials file
        run: |
          cat > credential.json << EOF
          ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
          EOF
      - name: Update cache
        uses: actions/cache@v3
        if: matrix.data.cachefiles != ''
        with:
          path: ${{ matrix.data.cachefiles }}
          key: cache-${{ matrix.data.cacheKey }}
          restore-keys: |
            cache-${{ matrix.data.cacheKey }} 
      - name: Pre build actions
        uses: ./.github/actions/pre-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - name: Test, Build and Publish
        run: ${{ matrix.data.command }}
      - name: Post build actions
        uses: ./.github/actions/post-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - uses: actions/upload-artifact@v3
        if: matrix.data.artifacts != ''
        with:
          name: ${{ matrix.data.artifactName }}
          path: ${{ matrix.data.artifacts }}
