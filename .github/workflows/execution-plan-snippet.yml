name: "Execution Plan"
on:
  workflow_call:
    inputs:
      trigger:
        required: true
        type: string
        description: "The trigger which calls the workflow, one of [pull-request, main, tag]"

jobs:
  execution_plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: google-github-actions/auth@v2
        name: "Authenticate to Google Cloud"
        with:
          credentials_json: ${{ secrets.FDC_CORE_CI_IMAGE_READER }}
      - name: gcloud authorize
        run: |
          gcloud auth configure-docker
      - run: mkdir -p artifacts/
      - name: Plan execution pull request
        if: inputs.trigger == 'pull-request'
        run: |
          ./infrastructure/scripts/execution-plan/plan-pr.sh ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} > artifacts/execution-plan.json
      - name: Plan execution main
        if: inputs.trigger == 'main' || inputs.trigger == 'tag'
        run: |
          ./infrastructure/scripts/execution-plan/plan-main.sh > artifacts/execution-plan.json
      - name: Print execution plan
        run: |
          cat artifacts/execution-plan.json
      - name: Convert plan to github specific format
        run: |
          GITHUB_CONVERTOR_IMAGE="eu.gcr.io/freiheit-core/images/github-convertor:0.8-scratch-NG-8"
          DEFAULT_IMAGE="docker:git"
          cat artifacts/execution-plan.json | docker run -i "${GITHUB_CONVERTOR_IMAGE}" "${DEFAULT_IMAGE}" > artifacts/github-convertor.json
      - name: Print github converted plan
        run: |
          cat artifacts/github-convertor.json
      - name: Split up plan into individual parts
        id: splitplan
        run: |
          echo "stage_a=$(cat artifacts/github-convertor.json | jq '.stage_a.steps' -c)" >> $GITHUB_OUTPUT
          echo "stage_b=$(cat artifacts/github-convertor.json | jq '.stage_b.steps' -c)" >> $GITHUB_OUTPUT
      - uses: actions/upload-artifact@v4
        name: Upload execution plan
        with:
          name: execution-plan.json
          path: |
            artifacts/execution-plan.json
            artifacts/github-convertor.json
    outputs:
      stage_a: ${{ steps.splitplan.outputs.stage_a }}
      stage_b: ${{ steps.splitplan.outputs.stage_b }}
  stageA_build:
    needs: [execution_plan]
    if: needs.execution_plan.outputs.stage_a != 'null'
    strategy:
      matrix:
        data: ${{fromJSON(needs.execution_plan.outputs.stage_a)}}
    name: ${{ matrix.data.directory }} - Build and Publish
    runs-on: ubuntu-latest
    # we want to publish to the ghcr.io registry. For this we need to have package:write rights
    permissions:
      packages: write
      contents: read
    steps:
      - name: Install earthly
        uses: earthly/actions-setup@v1
        with:
          version: v0.8.13
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set version pr/main
        if: inputs.trigger == 'pull-request' || inputs.trigger == 'main'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "VERSION=$(make version)" >> $GITHUB_ENV
      - name: Set version tag
        if: inputs.trigger == 'tag'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}"  >> $GITHUB_ENV
      - name: Add credentials file
        run: |
          cat > credential.json << EOF
          ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
          EOF
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: europe-west3-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
      - name: Update cache
        uses: actions/cache@v4
        if: matrix.data.cachefiles != ''
        with:
          path: ${{ matrix.data.cachefiles }}
          key: cache-${{ matrix.data.cacheKey }}
          restore-keys: |
            cache-${{ matrix.data.cacheKey }}
      - name: Pre build actions
        uses: ./.github/actions/pre-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - name: Test, Build and Publish
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          ${{ matrix.data.command }}
      - name: Post build actions
        uses: ./.github/actions/post-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - uses: actions/upload-artifact@v4
        if: matrix.data.artifacts != ''
        with:
          name: ${{ matrix.data.artifactName }}
          path: |
            ${{ matrix.data.artifacts }}
  stageB_build:
    needs: [execution_plan, stageA_build]
    # Workaround to run stageB in case stageA was skipped
    if: |
      always() &&
      (needs.stageA_build.result != 'failed')  &&
      (needs.execution_plan.outputs.stage_b != 'null')
    strategy:
      matrix:
        data: ${{fromJSON(needs.execution_plan.outputs.stage_b)}}
    name: ${{ matrix.data.directory }} - Build and Publish
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.data.image }}
    # we want to publish to the ghcr.io registry. For this we need to have package:write rights
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set version pr/main
        if: inputs.trigger == 'pull-request' || inputs.trigger == 'main'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "VERSION=$(make version)" >> $GITHUB_ENV
      - name: Set version tag
        if: inputs.trigger == 'tag'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}"  >> $GITHUB_ENV
      - name: Add credentials file
        run: |
          cat > credential.json << EOF
          ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
          EOF
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: europe-west3-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
      - name: Update cache
        uses: actions/cache@v4
        if: matrix.data.cachefiles != ''
        with:
          path: ${{ matrix.data.cachefiles }}
          key: cache-${{ matrix.data.cacheKey }}
          restore-keys: |
            cache-${{ matrix.data.cacheKey }}
      - name: Pre build actions
        uses: ./.github/actions/pre-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - name: Test, Build and Publish
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          # We only want the image tag, but the exec-planner only provides the full image name,
          # so we extract everything after the ":"
          TAG=$(echo ${{matrix.data.image}} | cut -d ':' -f 2)
          EARTHLY_DISABLE_REMOTE_REGISTRY_PROXY=true PARENT_CONTAINER=$TAG ARTIFACT_REGISTRY_MIRROR=true IMAGE_REGISTRY=ghcr.io/freiheit-com/kuberpult ${{ matrix.data.command }}
      - name: Post build actions
        uses: ./.github/actions/post-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - uses: actions/upload-artifact@v4
        if: matrix.data.artifacts != ''
        with:
          name: ${{ matrix.data.artifactName }}
          path: |
            ${{ matrix.data.artifacts }}
  cleanup:
    needs: [stageB_build, execution_plan]
    name: Cleanup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set version pr/main
        if: inputs.trigger == 'pull-request' || inputs.trigger == 'main'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "VERSION=$(make version)" >> $GITHUB_ENV
      - name: Set version tag
        if: inputs.trigger == 'tag'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}"  >> $GITHUB_ENV
      - name: Cleanup
        run: make cleanup-pr
