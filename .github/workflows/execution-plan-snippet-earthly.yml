# This workflow was created to test the performance of earthly with a remote buildkit. Cleaning up duplicate workflows will be handled in SRX-0ZZ92S
name: "Execution Plan"
on:
  workflow_call:
    inputs:
      trigger:
        required: true
        type: string
        description: "The trigger which calls the workflow, one of [pull-request, main, tag]"

jobs:
  execution_plan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: google-github-actions/auth@v2
        name: "Authenticate to Google Cloud"
        with:
          credentials_json: ${{ secrets.FDC_DEV_ENV_CI_IMAGE_READER }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          version: '>= 363.0.0'
      - run: mkdir -p artifacts/
      - name: Hardcode the converted plan
        run: |
          echo '{
            "stage_a": {
              "steps": [
                {
                  "image": "docker:git",
                  "command": "make -C infrastructure/docker/builder build-main DOCKER_REGISTRY_URI=europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult IMAGE_TAG=e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "artifacts": "",
                  "artifactName": "Artifact_infrastructure_docker_builder",
                  "directory": "infrastructure/docker/builder",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "docker:git",
                  "command": "make -C infrastructure/docker/git-ssh build-main DOCKER_REGISTRY_URI=europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult IMAGE_TAG=f28252ef84049ebb31c8cdf6f040a576da1b0bfd22ffe22ba2c6aaba0f8330a6",
                  "artifacts": "",
                  "artifactName": "Artifact_infrastructure_docker_git-ssh",
                  "directory": "infrastructure/docker/git-ssh",
                  "cachefiles": "",
                  "cacheKey": ""
                }
              ]
            },
            "stage_b": {
              "steps": [
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C services/manifest-repo-export-service build-main",
                  "artifacts": "services/manifest-repo-export-service/coverage.html",
                  "artifactName": "Artifact_services_manifest-repo-export-service",
                  "directory": "services/manifest-repo-export-service",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C services/rollout-service build-main",
                  "artifacts": "services/rollout-service/coverage.html",
                  "artifactName": "Artifact_services_rollout-service",
                  "directory": "services/rollout-service",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C cli build-main",
                  "artifacts": "cli/coverage.html",
                  "artifactName": "Artifact_cli",
                  "directory": "cli",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C pkg build-main",
                  "artifacts": "pkg/coverage.html",
                  "artifactName": "Artifact_pkg",
                  "directory": "pkg",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C services/cd-service build-main",
                  "artifacts": "services/cd-service/coverage.html",
                  "artifactName": "Artifact_services_cd-service",
                  "directory": "services/cd-service",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C services/reposerver-service build-main",
                  "artifacts": "services/reposerver-service/coverage.html",
                  "artifactName": "Artifact_services_reposerver-service",
                  "directory": "services/reposerver-service",
                  "cachefiles": "",
                  "cacheKey": ""
                },
                {
                  "image": "europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult/infrastructure/docker/builder:e681d01d89f67378f8d57613ee515b31682658d75c762c242f386e516b66deb8",
                  "command": "make -C services/frontend-service build-main",
                  "artifacts": "services/frontend-service/coverage.html",
                  "artifactName": "Artifact_services_frontend-service",
                  "directory": "services/frontend-service",
                  "cachefiles": "",
                  "cacheKey": ""
                }
              ]
            }
          }' > artifacts/github-convertor.json
      - name: Print github converted plan
        run: |
          cat artifacts/github-convertor.json
      - name: Split up plan into individual parts
        id: splitplan
        run: |
          echo "stage_a=$(cat artifacts/github-convertor.json | jq '.stage_a.steps' -c)" >> $GITHUB_OUTPUT
          echo "stage_b=$(cat artifacts/github-convertor.json | jq '.stage_b.steps' -c)" >> $GITHUB_OUTPUT
          echo "stage_a=$(cat artifacts/github-convertor.json | jq '.stage_a.steps' -c)" > artifacts/stage.a.tmp.json
          echo "stage_b=$(cat artifacts/github-convertor.json | jq '.stage_b.steps' -c)" > artifacts/stage.b.tmp.json
      - uses: actions/upload-artifact@v4
        name: Upload execution plan
        with:
          name: execution-plan.zip
          path: |
            artifacts/stage.a.tmp.json
            artifacts/stage.b.tmp.json
            artifacts/execution-plan.json
            artifacts/github-convertor.json
      - name: Split up plan into individual parts
        id: testingabc
        run: |
          echo "A: ${{ steps.splitplan.outputs.stage_a }} "
          echo "B: ${{ steps.splitplan.outputs.stage_b }} "
    outputs:
      stage_a: ${{ steps.splitplan.outputs.stage_a }}
      stage_b: ${{ steps.splitplan.outputs.stage_b }}
  stageA_build:
    needs: [execution_plan]
    if: needs.execution_plan.outputs.stage_a != 'null'
    strategy:
      matrix:
        data: ${{fromJSON(needs.execution_plan.outputs.stage_a)}}
    name: ${{ matrix.data.directory }} - Build and Publish
    runs-on: ubuntu-latest
    # we want to publish to the ghcr.io registry. For this we need to have package:write rights
    permissions:
      packages: write
      contents: read
    steps:
      - name: Install earthly
        uses: earthly/actions-setup@v1
        with:
          version: v0.8.13
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set version pr/main
        if: inputs.trigger == 'pull-request' || inputs.trigger == 'main'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "VERSION=$(make version)" >> $GITHUB_ENV
      - name: Set version tag
        if: inputs.trigger == 'tag'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}"  >> $GITHUB_ENV
      - name: Add credentials file
        run: |
          cat > credential.json << EOF
          ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
          EOF
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: europe-west3-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
      - name: Update cache
        uses: actions/cache@v4
        if: matrix.data.cachefiles != ''
        with:
          path: ${{ matrix.data.cachefiles }}
          key: cache-${{ matrix.data.cacheKey }}
          restore-keys: |
            cache-${{ matrix.data.cacheKey }}
      - name: Pre build actions
        uses: ./.github/actions/pre-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - name: Test, Build and Publish
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          ${{ matrix.data.command }}
      - name: Post build actions
        uses: ./.github/actions/post-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - uses: actions/upload-artifact@v4
        if: matrix.data.artifacts != ''
        with:
          if-no-files-found: error
          name: ${{ matrix.data.artifactName }}
          path: |
            ${{ matrix.data.artifacts }}
  stageB_build:
    needs: [execution_plan, stageA_build]
    # Workaround to run stageB in case stageA was skipped
    if: |
      always() &&
      (needs.stageA_build.result != 'failed')  &&
      (needs.stageA_build.result != 'cancelled')  &&
      (needs.execution_plan.outputs.stage_b != 'null')
    strategy:
      fail-fast: false
      matrix:
        data: ${{fromJSON(needs.execution_plan.outputs.stage_b)}}
    name: ${{ matrix.data.directory }} - Build and Publish
    runs-on: ubuntu-latest
    # we want to publish to the ghcr.io registry. For this we need to have package:write rights
    permissions:
      packages: write
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install earthly
        uses: earthly/actions-setup@v1
        with:
          version: v0.8.13
      - name: Set version pr/main
        if: inputs.trigger == 'pull-request' || inputs.trigger == 'main'
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "VERSION=$(make version)" >> $GITHUB_ENV
      - name: Set version tag
        if: inputs.trigger == 'tag'
        run: |
          echo "VERSION=${GITHUB_REF#refs/tags/}"  >> $GITHUB_ENV
      - name: Add credentials file
        run: |
          cat > credential.json << EOF
          ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
          EOF
      - name: Login to Google Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: europe-west3-docker.pkg.dev
          username: _json_key
          password: ${{ secrets.GCP_ARTIFACT_REGISTRY_PUSH_JSON_KEY }}
      - name: Update cache
        uses: actions/cache@v4
        if: matrix.data.cachefiles != ''
        with:
          path: ${{ matrix.data.cachefiles }}
          key: cache-${{ matrix.data.cacheKey }}
          restore-keys: |
            cache-${{ matrix.data.cacheKey }}
      - name: Pre build actions
        uses: ./.github/actions/pre-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - name: Test, Build and Publish
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          # We only want the image tag, but the exec-planner only provides the full image name,
          # so we extract everything after the ":"
          TAG=$(echo ${{matrix.data.image}} | cut -d ':' -f 2)
          EARTHLY_DISABLE_REMOTE_REGISTRY_PROXY=true PARENT_CONTAINER=$TAG ARTIFACT_REGISTRY_MIRROR=true IMAGE_REGISTRY=europe-west3-docker.pkg.dev/fdc-public-docker-registry/kuberpult ${{ matrix.data.command }}
      - name: Post build actions
        uses: ./.github/actions/post-build-action
        with:
          data: ${{ toJSON(matrix.data) }}
      - uses: actions/upload-artifact@v4
        if: matrix.data.artifacts != ''
        with:
          if-no-files-found: error
          name: ${{ matrix.data.artifactName }}
          path: |
            ${{ matrix.data.artifacts }}
