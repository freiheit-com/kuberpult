syntax = "proto3";

option go_package = "github.com/freiheit-com/kuberpult/pkg/api";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

package api.v1;

service LockService {
  rpc CreateEnvironmentLock (CreateEnvironmentLockRequest) returns (google.protobuf.Empty) {}
  rpc DeleteEnvironmentLock (DeleteEnvironmentLockRequest) returns (google.protobuf.Empty) {}
  rpc CreateEnvironmentApplicationLock (CreateEnvironmentApplicationLockRequest) returns (google.protobuf.Empty) {}
  rpc DeleteEnvironmentApplicationLock (DeleteEnvironmentApplicationLockRequest) returns (google.protobuf.Empty) {}
}

service BatchService {
  rpc ProcessBatch (BatchRequest) returns (google.protobuf.Empty) {}
}

message BatchRequest {
  repeated BatchAction actions = 1;
}

message BatchAction {
  oneof action {
    CreateEnvironmentLockRequest create_environment_lock = 1;
    DeleteEnvironmentLockRequest delete_environment_lock = 2;
    CreateEnvironmentApplicationLockRequest create_environment_application_lock = 3;
    DeleteEnvironmentApplicationLockRequest delete_environment_application_lock = 4;
    DeployRequest deploy = 5;
    PrepareUndeployRequest prepare_undeploy = 6;
    UndeployRequest undeploy = 7;
  }
}

message CreateEnvironmentLockRequest {
  string environment = 1;
  string lock_id = 2;
  string message = 3;
}

message DeleteEnvironmentLockRequest {
  string environment = 1;
  string lock_id = 2;
}

message CreateEnvironmentApplicationLockRequest {
  string environment = 1;
  string application = 2;
  string lock_id = 3;
  string message = 4;
}

message DeleteEnvironmentApplicationLockRequest {
  string environment = 1;
  string application = 2;
  string lock_id = 3;
}

service DeployService {
  rpc Deploy (DeployRequest) returns (google.protobuf.Empty) {}
  rpc ReleaseTrain (ReleaseTrainRequest) returns (ReleaseTrainResponse) {}
}

enum LockBehavior {
  Record = 0;
  Fail = 1;
  Ignore = 2;
}

message DeployRequest {
  string environment = 1;
  string application = 2;
  uint64 version = 3;
  bool ignoreAllLocks = 4 [deprecated = true];
  LockBehavior lockBehavior = 5;
}

message PrepareUndeployRequest {
  string application = 1;
}

message UndeployRequest {
  string application = 1;
}

message ReleaseTrainRequest {
  string target = 1;
  string team = 2;
}

message ReleaseTrainResponse {
  string target = 1;
  string team = 2;
}

message Lock {
  string message = 1;
  string lock_id = 3;
  google.protobuf.Timestamp created_at = 4;
  Actor created_by = 5;
}

message LockedError {
  map<string, Lock> environment_locks = 1;
  map<string, Lock> environment_application_locks = 2;
}

service FrontendConfigService {
  rpc GetConfig (GetFrontendConfigRequest) returns (GetFrontendConfigResponse) {}
}

message GetFrontendConfigRequest {
}

message GetFrontendConfigResponse {
  message ArgoCD {
    string baseUrl = 1;
  }
  message Auth {
    message AzureAuthConfig {
      bool enabled = 1;
      string clientId = 2;
      string tenantId = 3;
      string cloudInstance = 4;
      string redirectURL = 5;
    }
    AzureAuthConfig azureAuth= 1;
  }
  ArgoCD argoCd = 1;
  Auth authConfig = 2;
  string sourceRepoUrl = 3;
  string kuberpultVersion = 4;

}


service OverviewService {
  rpc GetOverview (GetOverviewRequest) returns (GetOverviewResponse) {}
  rpc StreamOverview (GetOverviewRequest) returns (stream GetOverviewResponse) {}
}

message GetOverviewRequest {
  // Retrieve the overview at a certain state of the repository. If it's empty, the latest commit will be used.
  string git_revision = 1;
}

message GetOverviewResponse {
  map<string, Application> applications = 2;
  repeated EnvironmentGroup environmentGroups = 3;
  string git_revision = 4;
}

message EnvironmentGroup {
  string environmentGroupName = 1;
  repeated Environment environments = 2;
  // note that the distanceToUpstream should usually be configured to be the same for all envs in this group, but this is not enforced.
  uint32 distanceToUpstream = 3;
}

enum Priority {
  PROD = 0;
  PRE_PROD = 1;
  UPSTREAM = 2;
  OTHER = 3;
}

service EnvironmentService {
  rpc CreateEnvironment (CreateEnvironmentRequest) returns (google.protobuf.Empty) {}
}

message EnvironmentConfig {
  message Upstream {
    optional string  environment = 1;
    optional bool    latest = 2;
  }

  message ArgoCD {
    message SyncWindows {
      string           kind = 1; // "allow" or "deny"
      string           schedule = 2; // crontab format
      string           duration = 3; // duration the window is open (or closed)
      repeated string  applications = 4; // applications names
    }
    message Destination {
      string          name = 1;
      string          server = 2;
      optional string namespace = 3;
      optional string appProjectNamespace = 4;
      optional string applicationNamespace = 5;
    }
    message AccessEntry {
      string group = 1;
      string kind = 2;
    }
    message IgnoreDifferences {
      string          group = 1;
      string          kind = 2;
      string          name = 3;
      string          namespace = 4;
      repeated string jsonPointers = 5;
      repeated string jqPathExpressions = 6;
      repeated string managedFieldsManagers = 7;
    }

    repeated SyncWindows              syncWindows = 1;
    Destination                       destination = 2;
    repeated AccessEntry              accessList = 3;
    map<string, string>               applicationAnnotations = 4;
    repeated IgnoreDifferences        ignoreDifferences = 5;
    repeated string                   syncOptions = 6;
  }

  Upstream upstream = 1;
  ArgoCD argocd  = 2;
  optional string environmentGroup = 3;
}


message CreateEnvironmentRequest {
  string environment = 1;
  EnvironmentConfig config = 2;
}


message Environment {

  message Application {
    message ArgoCD {
      message SyncWindow {
        string kind = 1; // "allow" or "deny"
        string schedule = 2; // crontab format
        string duration = 3; // duration the window is open (or closed)
      }
      repeated SyncWindow syncWindows = 1;
    }

    string name = 1;
    // version=0 means "nothing is deployed"
    uint64 version = 2;
    map<string, Lock> locks = 3;
    // "version" describes the currently deployed version. "queuedVersion" describes a version that was to be deployed, but a lock stopped the deployment:
    // "queuedVersion" has nothing to do with queue.go
    // queuedVersion=0 means "nothing is queued"
    uint64 queuedVersion = 4;
    // google.protobuf.Timestamp deploy_date = 5; // This is never used
    bool undeployVersion = 6;
    ArgoCD argoCD = 7;
  }

  string name = 1;
  EnvironmentConfig config = 2;
  map<string, Lock> locks = 3;
  map<string, Application> applications = 4;
  uint32 distanceToUpstream = 5;
  Priority priority = 6;
}

message Release {
  uint64 version = 1;
  string source_commit_id = 2;
  string source_author = 3;
  string source_message = 4;
  google.protobuf.Timestamp created_at = 5;
  bool undeployVersion = 6;
  string prNumber = 7;
}

enum UndeploySummary {
  // "normal": usual case for an active app, there is no undeploy version deployed in any environment
  Normal = 0;
  // "undeploy": all versions are in "undeploy" or don't exist on an environment
  Undeploy = 1;
  // "mixed": undeploy is deployed in one or more, but not all environments
  Mixed = 2;
}

message Application {
  string name = 1;
  repeated Release releases = 2;
  string sourceRepoUrl= 3;
  string team = 4;
  UndeploySummary undeploySummary = 5;
}

message Actor {
  string name = 1;
  string email = 2;
}
