syntax = "proto3";

option go_package = "github.com/freiheit-com/kuberpult/pkg/api";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
package api.v1;

service LockService {
  rpc CreateEnvironmentLock (CreateEnvironmentLockRequest) returns (google.protobuf.Empty) {}
  rpc DeleteEnvironmentLock (DeleteEnvironmentLockRequest) returns (google.protobuf.Empty) {}
  rpc CreateEnvironmentApplicationLock (CreateEnvironmentApplicationLockRequest) returns (google.protobuf.Empty) {}
  rpc DeleteEnvironmentApplicationLock (DeleteEnvironmentApplicationLockRequest) returns (google.protobuf.Empty) {}
}

service BatchService {
  rpc ProcessBatch (BatchRequest) returns (google.protobuf.Empty) {}
}

message BatchRequest {
  repeated BatchAction actions = 1;
}

message BatchAction {
  oneof action {
    CreateEnvironmentLockRequest create_environment_lock = 1;
    DeleteEnvironmentLockRequest delete_environment_lock = 2;
    CreateEnvironmentApplicationLockRequest create_environment_application_lock = 3;
    DeleteEnvironmentApplicationLockRequest delete_environment_application_lock = 4;
    DeployRequest deploy = 5;
    PrepareUndeployRequest prepare_undeploy = 6;
    UndeployRequest undeploy = 7;
  }
}

message CreateEnvironmentLockRequest {
  string environment = 1;
  string lock_id = 2;
  string message = 3;
}

message DeleteEnvironmentLockRequest {
  string environment = 1;
  string lock_id = 2;
}

message CreateEnvironmentApplicationLockRequest {
  string environment = 1;
  string application = 2;
  string lock_id = 3;
  string message = 4;
}

message DeleteEnvironmentApplicationLockRequest {
  string environment = 1;
  string application = 2;
  string lock_id = 3;
}

service DeployService {
  rpc Deploy (DeployRequest) returns (google.protobuf.Empty) {}
  rpc ReleaseTrain (ReleaseTrainRequest) returns (ReleaseTrainResponse) {}
}

enum LockBehavior {
  Record = 0;
  Fail = 1;
  Ignore = 2;
}

message DeployRequest {
  string environment = 1;
  string application = 2;
  uint64 version = 3;
  bool ignoreAllLocks = 4 [deprecated = true];
  LockBehavior lockBehavior = 5;
}

message PrepareUndeployRequest {
  string application = 1;
}

message UndeployRequest {
  string application = 1;
}

message ReleaseTrainRequest {
  string environment = 1;
  string team = 2;
}

message ReleaseTrainResponse {
  string upstream = 1;
  string targetEnv = 2;
}

message Lock {
  string message = 1;
  string lock_id = 3;
  google.protobuf.Timestamp created_at = 4;
  Actor created_by = 5;
}

message LockedError {
  map<string, Lock> environment_locks = 1;
  map<string, Lock> environment_application_locks = 2;
}

service EnvironmentService {
  rpc CreateEnvironment (CreateEnvironmentRequest) returns (google.protobuf.Empty) {}
}

message CreateEnvironmentRequest {
  string environment = 1;
}

service FrontendConfigService {
  rpc GetConfig (GetFrontendConfigRequest) returns (GetFrontendConfigResponse) {}
}

message GetFrontendConfigRequest {
}

message GetFrontendConfigResponse {
  message ArgoCD {
    string baseUrl = 1;
  }
  message Auth {
    message AzureAuthConfig {
      bool enabled = 1;
      string clientId = 2;
      string tenantId = 3;
      string cloudInstance = 4;
      string redirectURL = 5;
    }
    AzureAuthConfig azureAuth= 1;
  }
  ArgoCD argoCd = 1;
  Auth authConfig = 2;
  string sourceRepoUrl = 3;
  string kuberpultVersion = 4;

}


service OverviewService {
  rpc GetOverview (GetOverviewRequest) returns (GetOverviewResponse) {}
  rpc GetDeployedOverview (GetDeployedOverviewRequest) returns (GetDeployedOverviewResponse) {}
  rpc StreamOverview (GetOverviewRequest) returns (stream GetOverviewResponse) {}
  rpc StreamDeployedOverview (GetDeployedOverviewRequest) returns (stream GetDeployedOverviewResponse) {}
}

message GetOverviewRequest {
}

message GetOverviewResponse {
  map<string, Environment> environments = 1 [deprecated=true]; // use environmentGroups instead!
  map<string, Application> applications = 2;
  repeated EnvironmentGroup environmentGroups = 3;
}

message GetDeployedOverviewRequest {
}

message GetDeployedOverviewResponse {
  map<string, Environment> environments = 1;
  map<string, Application> applications = 2;
}

message EnvironmentGroup {
  string environmentGroupName = 1;
  repeated Environment environments = 2;
  // note that the distanceToUpstream should usually be configured to be the same for all envs in this group, but this is not enforced.
  uint32 distanceToUpstream = 3;
}

enum Priority {
  PROD = 0;
  PRE_PROD = 1;
  UPSTREAM = 2;
  OTHER = 3;
}

message Environment {
  message Config {
    message Upstream {
      oneof upstream {
          string environment = 1;
          bool   latest = 2;
      }
    }
    Upstream upstream = 1;
    optional string environmentGroup = 2;
  }

  message Application {
    message ArgoCD {
      message SyncWindow {
        string kind = 1; // "allow" or "deny"
        string schedule = 2; // crontab format
        string duration = 3; // duration the window is open (or closed)
      }
      repeated SyncWindow syncWindows = 1;
    }

    string name = 1;
    uint64 version = 2;
    map<string, Lock> locks = 3;
    uint64 queuedVersion = 4;
    // google.protobuf.Timestamp deploy_date = 5; // This is never used
    bool undeployVersion = 6;
    ArgoCD argoCD = 7;
  }

  string name = 1;
  Config config = 2;
  map<string, Lock> locks = 3;
  map<string, Application> applications = 4;
  uint32 distanceToUpstream = 5;
  Priority priority = 6;
}

message Release {
  uint64 version = 1;
  string source_commit_id = 2;
  string source_author = 3;
  string source_message = 4;
  google.protobuf.Timestamp created_at = 5;
  bool undeployVersion = 6;
  string prNumber = 7;
}

message Application {
  string name = 1;
  repeated Release releases = 2;
  string sourceRepoUrl= 3;
  string team = 4;
}

message Actor {
  string name = 1;
  string email = 2;
}
