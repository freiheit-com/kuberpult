syntax = "proto3";

option go_package = "github.com/freiheit-com/kuberpult/pkg/api";

import "google/protobuf/timestamp.proto";

package api.v1;


service GitService {
  rpc GetGitTags (GetGitTagsRequest) returns (GetGitTagsResponse) {}
  // By "Product" we mean the entire collection of apps
  rpc GetProductSummary(GetProductSummaryRequest) returns(GetProductSummaryResponse) {}
  rpc GetCommitInfo(GetCommitInfoRequest) returns(GetCommitInfoResponse) {}
}

message GetGitTagsRequest {
}

message GetGitTagsResponse {
  repeated TagData tag_data = 1;
}

message GetProductSummaryRequest {
  string manifest_repo_commit_hash = 1;
  optional string environment = 2;
  optional string environment_group = 3;
}

message GetProductSummaryResponse {
  repeated ProductSummary product_summary = 1;
}

message ProductSummary {
  string app = 1;
  string version = 2;
  string commit_id = 3;
  string display_version = 4;
  string environment = 5;
  string team = 6;
}

message GetCommitInfoRequest {
  // The commit hash requested, can also be a prefix.
  string commit_hash = 1;
  uint64 page_number = 2;
}

message GetCommitInfoResponse {
  // The full commit hash, so that it can be displayed in case a
  // prefix was supplied in the request.
  string commit_hash = 4;
  string commit_message = 1;
  repeated string touched_apps = 2;
  repeated Event events = 3;
  string next_commit_hash = 5;
  string previous_commit_hash = 6;
  bool load_more = 7;
}

message Event {
  // data that ALL events have:
  google.protobuf.Timestamp created_at = 1;
  string uuid = 2;
  // data that is different per event type:
  oneof event_type {
    CreateReleaseEvent create_release_event = 3;
    DeploymentEvent deployment_event = 4;
    LockPreventedDeploymentEvent lock_prevented_deployment_event = 5;
    ReplacedByEvent replaced_by_event = 6;
  }
}

message CreateReleaseEvent {
  repeated string environment_names = 1;
}

message DeploymentEvent {
  message ReleaseTrainSource {
    string upstream_environment = 1;
    optional string target_environment_group = 2;
  }
  string application = 1;
  string target_environment = 2;
  optional ReleaseTrainSource release_train_source = 3;
}

message LockPreventedDeploymentEvent {
  enum LockType {
    LOCK_TYPE_UNKNOWN = 0;
    LOCK_TYPE_ENV = 1;
    LOCK_TYPE_APP = 2;
    LOCK_TYPE_TEAM = 3;
  }
  string application = 1;
  string environment = 2;
  string lock_message = 3;
  LockType lock_type = 4;
}

message ReplacedByEvent{
  string replaced_by_commit_id = 1;
  string application = 2;
  string environment = 3;
}

message TagData {
  string tag = 1;
  string commit_id = 2;
}

service BatchService {
  rpc ProcessBatch (BatchRequest) returns (BatchResponse) {}
}

message BatchRequest {
  repeated BatchAction actions = 1;
}

message BatchAction {
  oneof action {
    CreateEnvironmentLockRequest create_environment_lock = 1;
    DeleteEnvironmentLockRequest delete_environment_lock = 2;
    CreateEnvironmentApplicationLockRequest create_environment_application_lock = 3;
    DeleteEnvironmentApplicationLockRequest delete_environment_application_lock = 4;
    DeployRequest deploy = 5;
    PrepareUndeployRequest prepare_undeploy = 6;
    UndeployRequest undeploy = 7;
    DeleteEnvironmentFromAppRequest delete_env_from_app = 8;
    CreateEnvironmentRequest create_environment = 9;
    ReleaseTrainRequest release_train = 10;
    CreateReleaseRequest create_release = 11;
    CreateEnvironmentGroupLockRequest create_environment_group_lock = 12;
    DeleteEnvironmentGroupLockRequest delete_environment_group_lock = 13;
    CreateEnvironmentTeamLockRequest create_environment_team_lock = 14;
    DeleteEnvironmentTeamLockRequest delete_environment_team_lock = 15;
    DeleteEnvironmentRequest delete_environment = 16;
  }
}

message BatchResponse {
  repeated BatchResult results = 1;
}

message BatchResult {
  oneof result {
    ReleaseTrainResponse release_train = 10;
    CreateReleaseResponse create_release_response = 11;
  }
}

message CreateEnvironmentLockRequest {
  string environment = 1;
  string lock_id = 2;
  string message = 3;
  string ci_link = 4;
}

message DeleteEnvironmentLockRequest {
  string environment = 1;
  string lock_id = 2;
}

message CreateEnvironmentGroupLockRequest {
  string environment_group = 1;
  string lock_id = 2;
  string message = 3;
  string ci_link = 4;
}

message DeleteEnvironmentGroupLockRequest {
  string environment_group = 1;
  string lock_id = 2;
}


message CreateEnvironmentApplicationLockRequest {
  string environment = 1;
  string application = 2;
  string lock_id = 3;
  string message = 4;
  string ci_link = 5;
}

message DeleteEnvironmentApplicationLockRequest {
  string environment = 1;
  string application = 2;
  string lock_id = 3;
}

message CreateEnvironmentTeamLockRequest {
  string environment = 1;
  string team = 2;
  string lock_id = 3;
  string message = 4;
  string ci_link = 5;
}

message DeleteEnvironmentTeamLockRequest {
  string environment = 1;
  string team = 2;
  string lock_id = 3;
}


message CreateReleaseRequest {
  string environment = 1;
  string application = 2;
  string team = 3;
  // env->yaml
  map<string, string> manifests = 4;
  uint64 version = 5;
  string source_commit_id = 6;
  string source_author = 7;
  string source_message = 8;
  string source_repo_url = 9;
  string display_version = 10;
  string previous_commit_id = 11;
  string ci_link = 12;
  bool is_prepublish = 13;
}

message CreateReleaseResponseSuccess {
}

message CreateReleaseResponseGeneralFailure {
  string message = 1;
}

message CreateReleaseResponseTooOld {
}

message CreateReleaseResponseAppNameTooLong {
  string app_name = 1;
  string reg_exp = 2;
  uint32 max_len = 3;
}

message CreateReleaseResponseAlreadyExistsSame {
}

enum DifferingField {
  SOURCE_COMMIT_ID = 0;
  SOURCE_AUTHOR = 1;
  SOURCE_MESSAGE = 2;
  SOURCE_REPO_URL = 3;
  DISPLAY_VERSION = 4;
  TEAM = 5;
  MANIFESTS = 6;
}

message CreateReleaseResponseAlreadyExistsDifferent {
  DifferingField first_differing_field = 1; // there might be more differences, but we only report the first one
  string diff = 2;
}

message CreateReleaseResponse {
  oneof response {
    CreateReleaseResponseSuccess success = 1;
    CreateReleaseResponseTooOld too_old = 2;
    CreateReleaseResponseAppNameTooLong too_long = 3;
    CreateReleaseResponseGeneralFailure general_failure = 4;
    CreateReleaseResponseAlreadyExistsSame already_exists_same = 5;
    CreateReleaseResponseAlreadyExistsDifferent already_exists_different = 6;
  }
}

enum LockBehavior {
  RECORD = 0;
  FAIL = 1;
  IGNORE = 2;
}

message DeployRequest {
  string environment = 1;
  string application = 2;
  uint64 version = 3;
  bool ignore_all_locks = 4 [deprecated = true];
  LockBehavior lock_behavior = 5;
}

message PrepareUndeployRequest {
  string application = 1;
}

message UndeployRequest {
  string application = 1;
}

message DeleteEnvironmentFromAppRequest {
  string application = 1;
  string environment = 2;
}


message ReleaseTrainRequest {
  enum TargetType {
    UNKNOWN = 0;
    ENVIRONMENT = 1;
    ENVIRONMENTGROUP = 2;
  }
  string target = 1;
  string team = 2;
  string commit_hash = 3;
  TargetType target_type = 4;
  string ci_link = 5;
}

message ReleaseTrainResponse {
  string target = 1;
  string team = 2;
}

message Lock {
  string message = 1;
  string lock_id = 3;
  google.protobuf.Timestamp created_at = 4;
  Actor created_by = 5;
}

message LockedError {
  map<string, Lock> environment_locks = 1;
  map<string, Lock> environment_application_locks = 2;
  map<string, Lock> environment_team_locks = 3;
}

service FrontendConfigService {
  rpc GetConfig (GetFrontendConfigRequest) returns (GetFrontendConfigResponse) {}
}

message GetFrontendConfigRequest {
}

message GetFrontendConfigResponse {
  message ArgoCD {
    string base_url = 1;
    string namespace = 2;
  }
  message Auth {
    message AzureAuthConfig {
      bool enabled = 1;
      string client_id = 2;
      string tenant_id = 3;
      string cloud_instance = 4;
      string redirect_url = 5;
    }
    message DexAuthConfig {
      bool enabled = 1;
    }
    AzureAuthConfig azure_auth= 1;
    DexAuthConfig dex_auth= 2;
  }
  ArgoCD argo_cd = 1;
  Auth auth_config = 2;
  string source_repo_url = 3;
  string kuberpult_version = 4;
  string branch = 5;
  string manifest_repo_url = 6;
}

message GetVersionRequest {
  string git_revision = 1;
  string application = 2;
  string environment = 3;
}

message GetVersionResponse {
  uint64 version = 1;
  google.protobuf.Timestamp deployed_at = 2;
  string source_commit_id = 3;
}

service VersionService {
  rpc GetVersion (GetVersionRequest) returns (GetVersionResponse) {}
  rpc GetManifests (GetManifestsRequest) returns (GetManifestsResponse) {}
}

service MigrationService {
  rpc EnsureCustomMigrationApplied (EnsureCustomMigrationAppliedRequest) returns (EnsureCustomMigrationAppliedResponse) {}
}

message EnsureCustomMigrationAppliedRequest {
  KuberpultVersion version = 1;
}

message EnsureCustomMigrationAppliedResponse {
  bool migrations_applied = 1;
}

message KuberpultVersion {
  int32 major = 1;
  int32 minor = 2;
  int32 patch = 3;
}

service OverviewService {
  rpc GetOverview (GetOverviewRequest) returns (GetOverviewResponse) {}
  rpc StreamOverview (GetOverviewRequest) returns (stream GetOverviewResponse) {}

  rpc StreamChangedApps (GetChangedAppsRequest) returns (stream GetChangedAppsResponse) {}
  rpc GetAppDetails (GetAppDetailsRequest) returns (GetAppDetailsResponse) {}
  rpc GetAllAppLocks (GetAllAppLocksRequest) returns (GetAllAppLocksResponse) {}
  rpc GetAllEnvTeamLocks (GetAllEnvTeamLocksRequest) returns (GetAllEnvTeamLocksResponse) {}

  rpc StreamDeploymentHistory (DeploymentHistoryRequest) returns (stream DeploymentHistoryResponse) {}
}

service EnvironmentService {
  rpc GetEnvironmentConfig(GetEnvironmentConfigRequest) returns (GetEnvironmentConfigResponse) {}
}

message GetChangedAppsRequest {}

message GetChangedAppsResponse {
  repeated GetAppDetailsResponse changed_apps = 1;
}

message GetAllAppLocksRequest {}

message GetAllAppLocksResponse {
  map<string, AllAppLocks> all_app_locks = 1; //EnvName -> All app locks for that env
}

message AllAppLocks {
  map<string, Locks> app_locks = 1; //AppName -> all locks for that app
}

message GetAppDetailsRequest {
  string app_name = 1;
}

message GetAppDetailsResponse {
  Application application = 1; //General Application information
  map<string, Deployment> deployments = 2; // Env -> Release
  map<string, Locks> app_locks = 3; //EnvName -> []AppLocks
  map<string, Locks> team_locks= 4; //EnvName -> []TeamLocks
}

message GetAllEnvTeamLocksRequest {}

message GetAllEnvTeamLocksResponse {
  map<string, Locks> all_env_locks = 1; //EnvName -> All env locks for that env
  map<string, AllTeamLocks> all_team_locks = 2; //EnvName -> All team locks for that env
}

message DeploymentHistoryRequest {}

message DeploymentHistoryResponse {
  string deployment = 1;
}

message AllTeamLocks {
  map<string, Locks> team_locks = 1; //TeamName -> all locks for that team 
}


//Wrapper over array of locks
message Locks {
  repeated Lock locks = 2;
}

message Deployment {
  message DeploymentMetaData {
    string deploy_author = 1;
    // we use a string here, because the UI cannot handle int64 as a type.
    // the string contains the unix timestamps in seconds (utc)
    string deploy_time = 2;

    string ci_link = 3;
  }
  // version=0 means "nothing is deployed"
  uint64 version = 2;
  // "version" describes the currently deployed version. "queuedVersion" describes a version that was to be deployed, but a lock stopped the deployment:
  // "queuedVersion" has nothing to do with queue.go
  // queued_version=0 means "nothing is queued"
  uint64 queued_version = 4;
  // google.protobuf.Timestamp deploy_date = 5; // This is never used
  bool undeploy_version = 6;
  DeploymentMetaData deployment_meta_data = 7;
}

message GetOverviewRequest {
  // Retrieve the overview at a certain state of the repository. If it's empty, the latest commit will be used.
  string git_revision = 1;
}

//Lightweight version of application. Only contains name and team.
message OverviewApplication {
  string name = 1;
  string team = 2;
}

message GetOverviewResponse {
  repeated EnvironmentGroup environment_groups = 3;
  string git_revision = 4;
  string branch = 5;
  string manifest_repo_url = 6;
  repeated OverviewApplication lightweight_apps = 7;
}

message EnvironmentGroup {
  string environment_group_name = 1;
  repeated Environment environments = 2;
  // note that the distance_to_upstream should usually be configured to be the same for all envs in this group, but this is not enforced.
  uint32 distance_to_upstream = 3;
  /*
    Even though this field has the same name and type as Environment.priority, it does have difference semantics.

    Environment priority is calculated based on the location of an environment in a chain. Environment group priority is calculated based on the distance to upstream **and** the maximum global distance to upstream.
    This field therefore characterizes the "layer" of an environment group. The reason it is reusing the name and type of Environment.priority is to keep the calculation of environment colors in the frontend untouched.

    Note: proper calculation of this field assumes there is not more than one environment group hierarchy; that is, there is only one group with distance_to_upstream = 0.
  */
  Priority priority = 4;
}

enum Priority {
  // PROD is an environment that no environment names as its upstream and has an upstream itself
  PROD = 0;
  // PRE_PROD is an environment that is the upstream of a PROD environment (unless it is also an UPSTREAM)
  PRE_PROD = 1;
  // UPSTREAM is an environment that has no upstream environment of its own
  // UPSTREAM takes precendence over PRE_PROD
  UPSTREAM = 2;
  // any remaining environment once PROD, PRE_PROD, UPSTREAM and CANARY are assigned in a chain is OTHER
  OTHER = 3;
  // CANARY will appear between PRE_PROD and PROD in chains of 4 or more environments
  CANARY = 4;
  // YOLO is an environment that is both the first and last in the chain, so it is essentially both upstream and production
  YOLO = 5;
}

message EnvironmentConfig {
  message Upstream {
    optional string  environment = 1;
    optional bool    latest = 2;
  }

  message ArgoCD {
    message SyncWindows {
      string           kind = 1; // "allow" or "deny"
      string           schedule = 2; // crontab format
      string           duration = 3; // duration the window is open (or closed)
      repeated string  applications = 4; // applications names
    }
    message Destination {
      string          name = 1;
      string          server = 2;
      optional string namespace = 3;
      optional string app_project_namespace = 4;
      optional string application_namespace = 5;
    }
    message AccessEntry {
      string group = 1;
      string kind = 2;
    }
    message IgnoreDifferences {
      string          group = 1;
      string          kind = 2;
      string          name = 3;
      string          namespace = 4;
      repeated string json_pointers = 5;
      repeated string jq_path_expressions = 6;
      repeated string managed_fields_managers = 7;
    }

    repeated SyncWindows              sync_windows = 1;
    Destination                       destination = 2;
    repeated AccessEntry              access_list = 3;
    map<string, string>               application_annotations = 4;
    repeated IgnoreDifferences        ignore_differences = 5;
    repeated string                   sync_options = 6;
  }

  Upstream upstream = 1;
  ArgoCD argocd  = 2;

  // Buf somehow generates the wrong go annotation in this case.
  // To fix it, we changed the spelling, but now violate a linter rule.
  // So we disable the rule, according to https://buf.build/docs/lint/overview/#comment-ignores
  // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
  optional string environmentGroup = 3; // buf:lint:ignore FIELD_LOWER_SNAKE_CASE
}


message CreateEnvironmentRequest {
  string environment = 1;
  EnvironmentConfig config = 2;
}

message DeleteEnvironmentRequest {
  string environment = 1;
}

message GetEnvironmentConfigRequest {
  string environment = 1;
}

message GetEnvironmentConfigResponse {
  EnvironmentConfig config = 1;
}

message Warning {
  oneof warning_type {
    UnusualDeploymentOrder unusual_deployment_order = 1;
    UpstreamNotDeployed upstream_not_deployed = 2;
  }
}

message UnusualDeploymentOrder {
  uint64 upstream_version = 1;
  string upstream_environment = 2;
  uint64 this_version = 3;
  string this_environment = 4;
}

message UpstreamNotDeployed {
  string upstream_environment = 2;
  uint64 this_version = 3;
  string this_environment = 4;
}

message Environment {
  string name = 1;
  EnvironmentConfig config = 2;
  uint32 distance_to_upstream = 5;
  Priority priority = 6;
}

message Release {
  uint64 version = 1;
  string source_commit_id = 2;
  string source_author = 3;
  string source_message = 4;
  google.protobuf.Timestamp created_at = 5;
  bool undeploy_version = 6;
  string pr_number = 7;
  string display_version = 8;
  bool is_minor = 9;
  bool is_prepublish = 10;
  repeated string environments = 11;
}

enum UndeploySummary {
  // "normal": usual case for an active app, there is no undeploy version deployed in any environment
  NORMAL = 0;
  // "undeploy": all versions are in "undeploy" or don't exist on an environment
  UNDEPLOY = 1;
  // "mixed": undeploy is deployed in one or more, but not all environments
  MIXED = 2;
}

message Application {
  string name = 1;
  repeated Release releases = 2;
  string source_repo_url= 3;
  string team = 4;
  UndeploySummary undeploy_summary = 5;
  repeated Warning warnings = 8;
}

message Actor {
  string name = 1;
  string email = 2;
}

service RolloutService {
  rpc StreamStatus (StreamStatusRequest) returns (stream StreamStatusResponse) {}
  rpc GetStatus (GetStatusRequest) returns (GetStatusResponse) {}
}

message StreamStatusRequest {}
message GetStatusRequest {
  string environment_group = 1;
  string team = 2;
  uint64 wait_seconds = 3;
}

/*

Unknown = can't tell
Successful = everything is fine
Progressing = waiting for something
Error = error
*/
enum RolloutStatus {
  ROLLOUT_STATUS_UNKNOWN = 0; // argocd didn't report anything for this app
  ROLLOUT_STATUS_SUCCESFUL = 1; // sync succesful
  ROLLOUT_STATUS_PROGRESSING = 2; // argocd picked up the change but didn't apply it yet
  ROLLOUT_STATUS_ERROR = 3; // argocd applied the change but failed
  ROLLOUT_STATUS_PENDING = 4; // argocd hasn't yet picked up the change
  ROLLOUT_STATUS_UNHEALTHY = 5; // argocd applied the change succesfully, but the app is unhealthy
}

message StreamStatusResponse {
  string environment = 1;
  string application = 2;
  uint64 version     = 3;
  RolloutStatus rollout_status = 4;
}

message GetStatusResponse {
  message ApplicationStatus {
    string environment = 1;
    string application = 2;
    RolloutStatus rollout_status = 3;
  }
  RolloutStatus status = 1;
  repeated ApplicationStatus applications = 2;
}

service ReleaseTrainPrognosisService {
  rpc GetReleaseTrainPrognosis (ReleaseTrainRequest) returns (GetReleaseTrainPrognosisResponse) {}
}

enum ReleaseTrainAppSkipCause {
  APP_HAS_NO_VERSION_IN_UPSTREAM_ENV = 0;
  APP_ALREADY_IN_UPSTREAM_VERSION = 1;
  APP_IS_LOCKED = 2;
  APP_DOES_NOT_EXIST_IN_ENV = 3;
  APP_IS_LOCKED_BY_ENV = 4; // there is an env lock that prevents deployment for this app
  TEAM_IS_LOCKED = 5; //there is a team lock that prevents deployment for this app
  NO_TEAM_PERMISSION = 6; // the user is not on that team
}

message ReleaseTrainAppPrognosis {
  oneof outcome {
    ReleaseTrainAppSkipCause skip_cause = 1;
    uint64 deployed_version = 2;
  }
  repeated Lock locks = 3;
}

enum ReleaseTrainEnvSkipCause {
  ENV_HAS_NO_UPSTREAM = 0;
  ENV_HAS_NO_UPSTREAM_LATEST_OR_UPSTREAM_ENV = 1;
  ENV_HAS_BOTH_UPSTREAM_LATEST_AND_UPSTREAM_ENV = 2;
  UPSTREAM_ENV_CONFIG_NOT_FOUND = 3;
  ENV_IS_LOCKED = 4;
}

message ReleaseTrainEnvPrognosis {
  message AppsPrognosesWrapper {
    map<string, ReleaseTrainAppPrognosis> prognoses = 1;
  }
  oneof outcome {
    ReleaseTrainEnvSkipCause skip_cause = 1;
    AppsPrognosesWrapper apps_prognoses = 2;
  }
  repeated Lock locks = 3;
}

message GetReleaseTrainPrognosisResponse {
  map<string, ReleaseTrainEnvPrognosis> envs_prognoses = 1;
}

message GetManifestsRequest {
  string application = 1;
  string release = 2;
}

message Manifest {
  string environment = 1;
  string content = 2;
}

message GetManifestsResponse {
  Release release = 1;
  map<string, Manifest> manifests = 2;
}

service CloudRunService {
  rpc QueueDeployment (QueueDeploymentRequest) returns (QueueDeploymentResponse) {}
}

message QueueDeploymentRequest {
    bytes manifest = 1;
}

message QueueDeploymentResponse {}

service EslService {
  rpc GetFailedEsls (GetFailedEslsRequest) returns (GetFailedEslsResponse) {}
}

message GetFailedEslsRequest {}

message EslItem {
  int64 esl_version = 1;
  google.protobuf.Timestamp created_at = 2;
  string event_type = 3;
  string json = 4;
}

message EslFailedItem {
  int64 esl_version = 1;
  google.protobuf.Timestamp created_at = 2;
  string event_type = 3;
  string json = 4;
  string reason = 5;
  int64 transformer_esl_version = 6;
}

message GetFailedEslsResponse {
  repeated EslFailedItem failed_esls = 1;
}

enum CommitDeploymentStatus {
    UNKNOWN = 0;
    PENDING = 1;
    DEPLOYED = 2;
}

service CommitDeploymentService {
  rpc GetCommitDeploymentInfo (GetCommitDeploymentInfoRequest) returns (GetCommitDeploymentInfoResponse) {}
}

message GetCommitDeploymentInfoRequest {
  string commit_id = 1;
}

message AppCommitDeploymentStatus {
    map<string, CommitDeploymentStatus> deployment_status = 1;
}

message GetCommitDeploymentInfoResponse {
    map<string,AppCommitDeploymentStatus> deployment_status = 1;
}
